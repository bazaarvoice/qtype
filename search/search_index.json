{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>QType is a domain-specific language (DSL) for rapid prototyping of AI applications. It is designed to help developers define modular, composable AI systems using a structured YAML-based specification. QType supports models, prompts, tools, retrievers, and flow orchestration, and is extensible for code generation or live interpretation.</p>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>Install QType:</p> <pre><code>pip install qtype[interpreter]\n</code></pre> <p>Create a file <code>hello_world.qtype.yaml</code> that executes a single chat question:</p> <pre><code>id: hello_world\nflows:\n  - id: simple_qa_flow\n    steps:\n      - id: llm_inference_step\n        model: \n          id: gpt-4o\n          provider: openai\n          auth: \n            id: openai_auth\n            type: api_key\n            api_key: ${OPENAI_KEY}\n        system_message: |\n          You are a helpful assistant.\n        inputs:\n          - id: prompt\n            type: text\n        outputs:\n          - id: response_message\n            type: text\n</code></pre> <p>Put your openai api key into your <code>.env</code> file:</p> <pre><code>echo \"OPENAI_KEY=sk....\" &gt;&gt; .env\n</code></pre> <p>Validate that the file matches the spec:</p> <pre><code>qtype validate hello_world.qtype.yaml\n</code></pre> <p>You should see:</p> <pre><code>INFO: \u2705 Schema validation successful.\nINFO: \u2705 Model validation successful.\nINFO: \u2705 Language validation successful\nINFO: \u2705 Semantic validation successful\n</code></pre> <p>Finally,execute the flow.</p> <pre><code>qtype run flow '{\"prompt\":\"What is the airspeed of a laden swallow?\"}' hello_world.qtype.yaml \n</code></pre> <p>You should see (something similar to):</p> <pre><code>INFO: Executing flow: simple_qa_flow\n\nThe airspeed of a laden swallow is a humorous reference from the movie \"Monty Python and the Holy Grail.\" In the film, the question is posed as \"What is the airspeed velocity of an unladen swallow?\" The joke revolves around the absurdity and specificity of the question, and it doesn't have a straightforward answer. However, if you're curious about the real-life airspeed of a swallow, the European Swallow (Hirundo rustica) typically flies at around 11 meters per second, or 24 miles per hour, when unladen. The concept of a \"laden\" swallow is part of the humor, as it would depend on what the swallow is carrying and is not a standard measurement.\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Welcome to the QType development guide! This document provides comprehensive instructions for setting up your development environment and contributing to the project.</p>"},{"location":"contributing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Prerequisites</li> <li>Development Environment Setup</li> <li>Installing QType for Development</li> <li>Running Tests</li> <li>Code Quality and Standards</li> <li>Project Structure</li> <li>Making Changes</li> <li>CLI Usage</li> <li>Troubleshooting</li> </ul>"},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher (this project targets Python 3.10+)</li> <li>uv package manager (recommended) or pip</li> <li>Git for version control</li> </ul>"},{"location":"contributing/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"contributing/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/yourusername/qtype.git\ncd qtype\n</code></pre>"},{"location":"contributing/#2-set-up-python-environment","title":"2. Set Up Python Environment","text":"<p>We recommend using <code>uv</code> for dependency management as it's faster and more reliable:</p> <pre><code># Install uv if you haven't already\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Install all dependencies including development tools\nuv sync --group dev --extra interpreter\n</code></pre>"},{"location":"contributing/#installing-qtype-for-development","title":"Installing QType for Development","text":"<p>Install QType in editable mode so changes to the source code are immediately reflected:</p> <pre><code># Install in development mode\nuv pip install -e .[interpreter]\n</code></pre> <p>After installation, you should be able to run the <code>qtype</code> command from anywhere:</p> <pre><code>qtype --help\n</code></pre>"},{"location":"contributing/#running-tests","title":"Running Tests","text":"<p>The project uses pytest for testing with coverage measurement:</p> <pre><code># Run all tests\nuv run pytest\n\n# Run tests with coverage\nuv run pytest --cov=qtype\n\n# Run tests with coverage and generate HTML report\nuv run pytest --cov=qtype --cov-report=html\n\n# Run tests with verbose output\nuv run pytest -v\n\n# Run specific test file\nuv run pytest tests/test_loader_file_inclusion.py\n\n# Run specific test class\nuv run pytest tests/test_loader_file_inclusion.py::TestFileIncludeLoader\n\n# Run specific test method\nuv run pytest tests/test_loader_file_inclusion.py::TestFileIncludeLoader::test_include_yaml_file\n\n# Run tests matching a pattern\nuv run pytest -k \"test_include\"\n\n# Run tests with specific markers\nuv run pytest -m \"not network\"  # Skip network tests\nuv run pytest -m \"not slow\"     # Skip slow tests\n\n# Run tests in parallel (if pytest-xdist is installed)\nuv run pytest -n auto\n</code></pre>"},{"location":"contributing/#coverage-reports","title":"Coverage Reports","text":"<p>Coverage reports show: - Which lines of code are executed during tests - Which lines are missing test coverage - Overall coverage percentage for each module - HTML report with line-by-line coverage highlighting</p> <p>The HTML coverage report (<code>htmlcov/index.html</code>) provides the most detailed view, showing exactly which lines need more test coverage.</p>"},{"location":"contributing/#test-markers","title":"Test Markers","text":"<p>The project uses pytest markers to categorize tests: - <code>@pytest.mark.slow</code>: Tests that take longer to run - <code>@pytest.mark.network</code>: Tests requiring network access</p> <p>Skip specific test categories:</p> <pre><code># Skip slow tests\nuv run pytest -m \"not slow\"\n\n# Skip network tests\nuv run pytest -m \"not network\"\n\n# Run only network tests\nuv run pytest -m \"network\"\n</code></pre>"},{"location":"contributing/#code-quality-and-standards","title":"Code Quality and Standards","text":"<p>This project follows strict Python coding standards:</p>"},{"location":"contributing/#code-style-requirements","title":"Code Style Requirements","text":"<ul> <li>PEP 8 compliance for all Python code</li> <li>Type hints for all function signatures and class attributes</li> <li>Docstrings for all public functions, classes, and modules</li> <li>Clear naming using snake_case for functions/variables, PascalCase for classes</li> <li>Line length limit of 79 characters (as per PEP 8)</li> <li>f-strings for string interpolation</li> <li>Explicit over implicit code style</li> </ul>"},{"location":"contributing/#format-code-automatically","title":"Format code automatically:","text":"<pre><code># Format with ruff\nruff format qtype/ tests/\n\n# Lint with ruff\nruff check qtype/ tests/\n\n# Sort imports\nisort qtype/ tests/\n\n# Type checking with mypy\nmypy qtype/ tests/\n</code></pre>"},{"location":"contributing/#pre-commit-hooks-optional-but-recommended","title":"Pre-commit hooks (Optional but recommended):","text":"<pre><code>uv pip install pre-commit\npre-commit install\n</code></pre> <p>Settings are in <code>.pre-commit-config.yaml</code>:</p>"},{"location":"contributing/#project-structure","title":"Project Structure","text":"<ul> <li><code>qtype/</code> \u2013 Python package for parsing, validating, and interpreting QType specs</li> <li><code>examples/</code> \u2013 Example <code>.qtype.yaml</code> specs</li> <li><code>schema/</code> \u2013 JSON Schema auto-generated from the DSL</li> <li><code>docs/</code> \u2013 Documentation </li> <li><code>tests/</code> \u2013 Unit and integration tests</li> </ul>"},{"location":"contributing/#making-changes","title":"Making Changes","text":""},{"location":"contributing/#development-workflow","title":"Development Workflow","text":"<ol> <li> <p>Create a feature branch: <code>bash    git checkout -b feature/your-feature-name</code></p> </li> <li> <p>Make your changes following the coding standards</p> </li> <li> <p>Write or update tests for your changes</p> </li> <li> <p>Run tests to ensure nothing is broken:    <code>bash    uv run pytest --cov=qtype</code></p> </li> <li> <p>Check code quality: <code>bash    ruff format qtype/ tests/    ruff check qtype/ tests/    isort qtype/ tests/    mypy qtype/</code></p> </li> <li> <p>Test CLI functionality:    ```bash    # Generate schema    ptython -m qtype.cli generate-schema -o schema/test.json</p> </li> </ol> <p># Validate example spec    ptython -m qtype.cli validate examples/hello_world.qtype.yaml    ```</p> <ol> <li> <p>Update documentation if needed</p> </li> <li> <p>Commit your changes: <code>bash    git add .    git commit -m \"feat: add your feature description\"</code></p> </li> </ol>"},{"location":"contributing/#how-to-expand-the-dsl","title":"How To: Expand The DSL","text":"<p>The core of qtype is the DSL specified in qtype/dsl/model.py. All functionality is rooted in the pydantic classes in that file. To expand the dsl with new classes, types, etc., edit this file.</p> <p>Once you have it to your liking, you can generate the new schema:</p> <pre><code>qtype generate schema -o schema/qtype.schema.json \n</code></pre> <p>Next, make a canonical example of your new type in the <code>examples</code> folder (e.g., <code>examples/new_type_example.qtype.yaml</code>).</p> <p>You can make vscode validate it with your newly generated schema by adding it to your <code>settings.json</code>:</p> <pre><code>\"yaml.schemas\" : {\n   \"schema/qtype.schema.json\": [\"qtype.config.yaml\", \"*.qtype.yaml\"],\n},\n</code></pre> <p>The semantic model for your new class can be generated automatically as well:</p> <pre><code>qtype generate semantic-model\n</code></pre> <p>This command updates <code>qtype/semantic/model.py</code> with any new types in the <code>qtype/dsl/model.py</code> using the following rules: * Class names that end in <code>List</code> are ignored * Any member that has an <code>&lt;DSLClass&gt; | str</code> type are switched to <code>&lt;DSLClass&gt;</code> (as it assumes the <code>str</code> is a reference) * All <code>List | None</code> types are switched to <code>List</code> as omitted lists are replaced with empty lists in the semantic representation.</p> <p>Next, ensure your new types can be validated:</p> <pre><code>qtype validate examples/new_type_example.qtype.yaml\n</code></pre> <p>The docstrings in the types are used to update the documentation with:</p> <pre><code>qtype generate dsl-docs\n</code></pre> <p>Finally, if desired, you can update the interpreter to support your new type.</p>"},{"location":"contributing/#adding-new-dependencies","title":"Adding New Dependencies","text":"<p>When adding new dependencies, use uv to add to <code>pyproject.toml</code>:</p> <pre><code>uv add &lt;dependency&gt;\n</code></pre> <p>Then update the lock file:</p> <pre><code>uv lock\n</code></pre>"},{"location":"contributing/#next-steps","title":"Next Steps","text":"<p>After setting up your development environment:</p> <ol> <li>Explore the <code>examples/</code> directory to understand QType specifications</li> <li>Run the existing tests to ensure everything works</li> <li>Read the documentation in <code>docs/</code></li> <li>Look at open issues for contribution opportunities</li> <li>Start with small improvements or bug fixes</li> </ol> <p>Happy coding! \ud83d\ude80</p>"},{"location":"plugins/","title":"QType CLI Plugins","text":"<p>QType supports third-party CLI plugins through Python entry points. This allows developers to extend the QType CLI with custom commands without modifying the core codebase.</p>"},{"location":"plugins/#creating-a-plugin","title":"Creating a Plugin","text":""},{"location":"plugins/#1-define-your-command-function","title":"1. Define Your Command Function","text":"<p>Create a module with a parser function that takes a subparsers object and registers your command:</p> <pre><code># my_package/qtype_commands.py\nimport argparse\n\ndef my_command_parser(subparsers: argparse._SubParsersAction) -&gt; None:\n    \"\"\"Register the 'my-command' subcommand.\"\"\"\n    parser = subparsers.add_parser(\n        'my-command',\n        help='My custom QType command'\n    )\n    parser.add_argument(\n        '--option',\n        help='An example option'\n    )\n    # Set the function to call when this command is invoked\n    parser.set_defaults(func=my_command_handler)\n\ndef my_command_handler(args: argparse.Namespace) -&gt; None:\n    \"\"\"Handle the 'my-command' subcommand.\"\"\"\n    print(f\"Running my-command with option: {args.option}\")\n</code></pre>"},{"location":"plugins/#2-register-the-entry-point","title":"2. Register the Entry Point","text":"<p>Add the entry point to your package's <code>pyproject.toml</code>:</p> <pre><code>[project.entry-points.\"qtype.commands\"]\nmy-command = \"my_package.qtype_commands:my_command_parser\"\n</code></pre> <p>Or if using <code>setup.py</code>:</p> <pre><code>from setuptools import setup\n\nsetup(\n    name=\"my-qtype-plugin\",\n    # ... other setup parameters\n    entry_points={\n        \"qtype.commands\": [\n            \"my-command = my_package.qtype_commands:my_command_parser\",\n        ],\n    },\n)\n</code></pre>"},{"location":"plugins/#3-install-and-test","title":"3. Install and Test","text":"<p>After installing your package, the command will be automatically available:</p> <pre><code>pip install my-qtype-plugin\nqtype my-command --option \"test\"\n</code></pre>"},{"location":"plugins/#best-practices","title":"Best Practices","text":"<ol> <li>Naming: Use descriptive command names and avoid conflicts with built-in commands</li> <li>Error Handling: Handle errors gracefully and provide helpful error messages</li> <li>Documentation: Include help text for your commands and arguments</li> <li>Dependencies: Declare any additional dependencies your plugin requires</li> <li>Testing: Test your plugin with different versions of QType</li> </ol>"},{"location":"plugins/#debugging-plugins","title":"Debugging Plugins","text":"<p>To see debug information about plugin loading, run QType with debug logging:</p> <pre><code>qtype --log-level DEBUG my-command\n</code></pre> <p>This will show which plugins are being loaded and any errors that occur during the loading process.</p>"},{"location":"plugins/#example-plugin-structure","title":"Example Plugin Structure","text":"<pre><code>my-qtype-plugin/\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 my_package/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 qtype_commands.py\n\u2514\u2500\u2500 tests/\n    \u2514\u2500\u2500 test_plugin.py\n</code></pre>"},{"location":"roadmap/","title":"Roadmap","text":"<p>This document outlines the planned features, improvements, and milestones for the QType project.</p>"},{"location":"roadmap/#current-status","title":"Current Status","text":"<ul> <li>\u2705 Core DSL implementation</li> <li>\u2705 Basic validation and semantic resolution</li> <li>\u2705 CLI interface with convert, generate, run, and validate commands</li> <li>\u2705 AWS Bedrock model integration</li> </ul>"},{"location":"roadmap/#upcoming-milestones","title":"Upcoming Milestones","text":""},{"location":"roadmap/#v001","title":"v0.0.1","text":""},{"location":"roadmap/#documentation","title":"Documentation","text":"<ul> <li>[ ] Documentation setup with mkdocs</li> <li>[ ] Examples showroom illustrating use cases</li> <li>[ ] Page for each concecpt and examples thereof</li> <li>[ ] Document how to add to the dsl</li> <li>[ ] Document how to use DSL in visual studio code</li> <li>[ ] Docunment how to use includes, anchors, and references.</li> </ul>"},{"location":"roadmap/#openai-support","title":"OpenAI Support","text":"<ul> <li>[ ] Examples etc for using OpeanAI models</li> </ul>"},{"location":"roadmap/#future-work","title":"Future Work","text":""},{"location":"roadmap/#dsl","title":"DSL","text":"<ul> <li>[ ] Add support for vectorstores and sql chat stores</li> <li>[ ] Add support for more complex conditions</li> <li>[ ] Expand Authorization types into abstract classes for different ways to authorize</li> <li>[ ] Add support for vectorstores and sql chat stores</li> <li>[ ] Add support for DocumentIndexes.</li> <li>[ ] Add feedbnack types and steps</li> </ul>"},{"location":"roadmap/#tools","title":"Tools","text":"<ul> <li>[ ] Add support for importing tools from API</li> <li>[ ] Refine the type abstractions for tool importing from mdoules</li> </ul>"},{"location":"roadmap/#exended-capabilities","title":"Exended Capabilities","text":"<ul> <li>[ ] (Interpreter) - User Interface</li> <li>[ ] (Interpreter) - Support other model providers</li> <li>[ ] (Interpreter) - Store memory and session info in a cache to enable this kind of stateful communication.</li> <li>[ ] (Interpreter) - Refine Agent interpreter for greater tool support and chat history</li> <li>[ ] (Interpreter) - Run as MCP server</li> </ul>"},{"location":"roadmap/#advanced-ai-capabilities","title":"Advanced AI Capabilities","text":"<ul> <li>[ ] Multi-modal support (text, image, audio)</li> <li>[ ] Agent-based architectures</li> <li>[ ] RAG OOTB</li> <li>[ ] Workflows for measuring workflows</li> </ul>"},{"location":"roadmap/#feature-requests-community-input","title":"Feature Requests &amp; Community Input","text":"<p>We welcome community feedback and feature requests! Please:</p> <ol> <li>Check existing GitHub Issues before submitting</li> <li>Use the appropriate issue templates</li> <li>Participate in Discussions for broader topics</li> <li>Consider contributing via pull requests</li> </ol>"},{"location":"roadmap/#contributing-to-the-roadmap","title":"Contributing to the Roadmap","text":"<p>This roadmap is a living document that evolves based on: - Community feedback and usage patterns - Technical feasibility assessments - Business priorities and partnerships - Emerging AI/ML trends and capabilities</p> <p>For significant roadmap suggestions, please: 1. Open a GitHub Discussion with the \"roadmap\" label 2. Provide clear use cases and benefits 3. Consider implementation complexity 4. Engage with the community for feedback</p> <p>Last updated: July 28, 2025 *For the most current information, see GitHub Issues </p>"},{"location":"DSL-Reference/APITool/","title":"APITool","text":"<p>Tool that invokes an API endpoint.</p>"},{"location":"DSL-Reference/APITool/#members","title":"Members","text":"<ul> <li>endpoint (<code>str</code>): API endpoint URL to call.</li> <li>method (<code>str</code>): HTTP method to use (GET, POST, PUT, DELETE, etc.).</li> <li>auth (<code>AuthorizationProvider | str | None</code>): Optional AuthorizationProvider for API authentication.</li> <li>headers (<code>dict[str, str] | None</code>): Optional HTTP headers to include in the request.</li> </ul>"},{"location":"DSL-Reference/Agent/","title":"Agent","text":"<p>Defines an agent that can perform tasks and make decisions based on user input and context.</p>"},{"location":"DSL-Reference/Agent/#members","title":"Members","text":"<ul> <li>tools (<code>list[ToolType | str]</code>): List of tools available to the agent.</li> </ul>"},{"location":"DSL-Reference/Application/","title":"Application","text":"<p>Defines a QType application that can include models, variables, and other components.</p>"},{"location":"DSL-Reference/Application/#members","title":"Members","text":"<ul> <li>id (<code>str</code>): Unique ID of the application.</li> <li>description (<code>str | None</code>): Optional description of the application.</li> <li>memories (<code>list[Memory] | None</code>): List of memory definitions used in this application.</li> <li>models (<code>list[ModelType] | None</code>): List of models used in this application.</li> <li>types (<code>list[ObjectTypeDefinition | ArrayTypeDefinition] | None</code>): List of custom types defined in this application.</li> <li>variables (<code>list[Variable] | None</code>): List of variables used in this application.</li> <li>flows (<code>list[Flow] | None</code>): List of flows defined in this application.</li> <li>auths (<code>list[AuthorizationProvider] | None</code>): List of authorization providers used for API access.</li> <li>tools (<code>list[ToolType] | None</code>): List of tools available in this application.</li> <li>indexes (<code>list[IndexType] | None</code>): List of indexes available for search operations.</li> <li>telemetry (<code>TelemetrySink | None</code>): Optional telemetry sink for observability.</li> <li>references (<code>list[Document] | None</code>): List of other q-type documents you may use. This allows modular composition and reuse of components across applications.</li> </ul>"},{"location":"DSL-Reference/ArrayTypeDefinition/","title":"ArrayTypeDefinition","text":"<p>No documentation available.</p>"},{"location":"DSL-Reference/ArrayTypeDefinition/#members","title":"Members","text":"<ul> <li>kind (<code>StructuralTypeEnum</code>): (No documentation available.)</li> <li>type (<code>VariableType | str</code>): The type of items in the array.</li> </ul>"},{"location":"DSL-Reference/AuthorizationProvider/","title":"AuthorizationProvider","text":"<p>Defines how tools or providers authenticate with APIs, such as OAuth2 or API keys.</p>"},{"location":"DSL-Reference/AuthorizationProvider/#members","title":"Members","text":"<ul> <li>id (<code>str</code>): Unique ID of the authorization configuration.</li> <li>api_key (<code>str | None</code>): API key if using token-based auth.</li> <li>client_id (<code>str | None</code>): OAuth2 client ID.</li> <li>client_secret (<code>str | None</code>): OAuth2 client secret.</li> <li>host (<code>str | None</code>): Base URL or domain of the provider.</li> <li>scopes (<code>list[str] | None</code>): OAuth2 scopes required.</li> <li>token_url (<code>str | None</code>): Token endpoint URL.</li> <li>type (<code>str</code>): Authorization method, e.g., 'oauth2' or 'api_key'.</li> </ul>"},{"location":"DSL-Reference/AuthorizationProviderList/","title":"AuthorizationProviderList","text":"<p>Schema for a standalone list of authorization providers.</p>"},{"location":"DSL-Reference/AuthorizationProviderList/#members","title":"Members","text":"<ul> <li>root (<code>list[AuthorizationProvider]</code>): (No documentation available.)</li> </ul>"},{"location":"DSL-Reference/Condition/","title":"Condition","text":"<p>Conditional logic gate within a flow. Supports branching logic for execution based on variable values.</p>"},{"location":"DSL-Reference/Condition/#members","title":"Members","text":"<ul> <li>else_ (<code>StepType | str | None</code>): Optional step to run if condition fails.</li> <li>equals (<code>Variable | str | None</code>): Match condition for equality check.</li> <li>then (<code>StepType | str</code>): Step to run if condition matches.</li> </ul>"},{"location":"DSL-Reference/Decoder/","title":"Decoder","text":"<p>Defines a step that decodes string data into structured outputs.</p> <pre><code>If parsing fails, the step will raise an error and halt execution.\nUse conditional logic in your flow to handle potential parsing errors.\n</code></pre>"},{"location":"DSL-Reference/Decoder/#members","title":"Members","text":"<ul> <li>format (<code>DecoderFormat</code>): Format in which the decoder processes data. Defaults to JSON.</li> </ul>"},{"location":"DSL-Reference/DecoderFormat/","title":"DecoderFormat","text":"<p>Defines the format in which the decoder step processes data.</p>"},{"location":"DSL-Reference/DecoderFormat/#members","title":"Members","text":"<ul> <li>json: Defines the format in which the decoder step processes data.</li> <li>name: The name of the Enum member.</li> <li>value: The value of the Enum member.</li> <li>xml: Defines the format in which the decoder step processes data.</li> </ul>"},{"location":"DSL-Reference/Document/","title":"Document","text":"<p>Schema for any valid QType document structure.</p> <pre><code>This allows validation of standalone lists of components, individual components,\nor full QType application specs. Supports modular composition and reuse.\n</code></pre>"},{"location":"DSL-Reference/Document/#members","title":"Members","text":"<ul> <li>root (<code>Agent | Application | AuthorizationProviderList | Flow | IndexList | ModelList | ToolList | TypeList | VariableList</code>): (No documentation available.)</li> </ul>"},{"location":"DSL-Reference/DocumentIndex/","title":"DocumentIndex","text":"<p>Document search index for text-based search (e.g., Elasticsearch, OpenSearch).</p>"},{"location":"DSL-Reference/DocumentIndex/#members","title":"Members","text":""},{"location":"DSL-Reference/DocumentSearch/","title":"DocumentSearch","text":"<p>Performs document search against a document index.</p>"},{"location":"DSL-Reference/DocumentSearch/#members","title":"Members","text":""},{"location":"DSL-Reference/EmbeddingModel/","title":"EmbeddingModel","text":"<p>Describes an embedding model configuration, extending the base Model class.</p>"},{"location":"DSL-Reference/EmbeddingModel/#members","title":"Members","text":"<ul> <li>dimensions (<code>int</code>): Dimensionality of the embedding vectors produced by this model.</li> </ul>"},{"location":"DSL-Reference/Flow/","title":"Flow","text":"<p>Defines a flow of steps that can be executed in sequence or parallel.     If input or output variables are not specified, they are inferred from     the first and last step, respectively.</p>"},{"location":"DSL-Reference/Flow/#members","title":"Members","text":"<ul> <li>steps (<code>list[StepType | str]</code>): List of steps or step IDs.</li> </ul>"},{"location":"DSL-Reference/Index/","title":"Index","text":"<p>Base class for searchable indexes that can be queried by search steps.</p>"},{"location":"DSL-Reference/Index/#members","title":"Members","text":"<ul> <li>id (<code>str</code>): Unique ID of the index.</li> <li>args (<code>dict[str, Any] | None</code>): Index-specific configuration and connection parameters.</li> <li>auth (<code>AuthorizationProvider | str | None</code>): AuthorizationProvider for accessing the index.</li> <li>name (<code>str</code>): Name of the index/collection/table.</li> </ul>"},{"location":"DSL-Reference/IndexList/","title":"IndexList","text":"<p>Schema for a standalone list of indexes.</p>"},{"location":"DSL-Reference/IndexList/#members","title":"Members","text":"<ul> <li>root (<code>list[DocumentIndex | VectorIndex]</code>): (No documentation available.)</li> </ul>"},{"location":"DSL-Reference/LLMInference/","title":"LLMInference","text":"<p>Defines a step that performs inference using a language model.     It can take input variables and produce output variables based on the model's response.</p>"},{"location":"DSL-Reference/LLMInference/#members","title":"Members","text":"<ul> <li>memory (<code>Memory | str | None</code>): Memory object to retain context across interactions.</li> <li>model (<code>ModelType | str</code>): The model to use for inference.</li> <li>system_message (<code>str | None</code>): Optional system message to set the context for the model.</li> </ul>"},{"location":"DSL-Reference/Memory/","title":"Memory","text":"<p>Session or persistent memory used to store relevant conversation or state data across steps or turns.</p>"},{"location":"DSL-Reference/Memory/#members","title":"Members","text":"<ul> <li>id (<code>str</code>): Unique ID of the memory block.</li> <li>token_limit (<code>int</code>): Maximum number of tokens to store in memory.</li> <li>chat_history_token_ratio (<code>float</code>): Ratio of chat history tokens to total memory tokens.</li> <li>token_flush_size (<code>int</code>): Size of memory to flush when it exceeds the token limit.</li> </ul>"},{"location":"DSL-Reference/Model/","title":"Model","text":"<p>Describes a generative model configuration, including provider and model ID.</p>"},{"location":"DSL-Reference/Model/#members","title":"Members","text":"<ul> <li>id (<code>str</code>): Unique ID for the model.</li> <li>auth (<code>AuthorizationProvider | str | None</code>): AuthorizationProvider used for model access.</li> <li>inference_params (<code>dict[str, Any] | None</code>): Optional inference parameters like temperature or max_tokens.</li> <li>model_id (<code>str | None</code>): The specific model name or ID for the provider. If None, id is used</li> <li>provider (<code>str</code>): Name of the provider, e.g., openai or anthropic.</li> </ul>"},{"location":"DSL-Reference/ModelList/","title":"ModelList","text":"<p>Schema for a standalone list of models.</p>"},{"location":"DSL-Reference/ModelList/#members","title":"Members","text":"<ul> <li>root (<code>list[EmbeddingModel | Model]</code>): (No documentation available.)</li> </ul>"},{"location":"DSL-Reference/ObjectTypeDefinition/","title":"ObjectTypeDefinition","text":"<p>No documentation available.</p>"},{"location":"DSL-Reference/ObjectTypeDefinition/#members","title":"Members","text":"<ul> <li>kind (<code>StructuralTypeEnum</code>): (No documentation available.)</li> <li>properties (<code>dict[str, VariableType | str] | None</code>): Defines the nested properties.</li> </ul>"},{"location":"DSL-Reference/PromptTemplate/","title":"PromptTemplate","text":"<p>Defines a prompt template with a string format and variable bindings.     This is used to generate prompts dynamically based on input variables.</p>"},{"location":"DSL-Reference/PromptTemplate/#members","title":"Members","text":"<ul> <li>template (<code>str</code>): String template for the prompt with variable placeholders.</li> </ul>"},{"location":"DSL-Reference/PythonFunctionTool/","title":"PythonFunctionTool","text":"<p>Tool that calls a Python function.</p>"},{"location":"DSL-Reference/PythonFunctionTool/#members","title":"Members","text":"<ul> <li>function_name (<code>str</code>): Name of the Python function to call.</li> <li>module_path (<code>str</code>): Optional module path where the function is defined.</li> </ul>"},{"location":"DSL-Reference/Search/","title":"Search","text":"<p>Base class for search operations against indexes.</p>"},{"location":"DSL-Reference/Search/#members","title":"Members","text":"<ul> <li>filters (<code>dict[str, Any] | None</code>): Optional filters to apply during search.</li> <li>index (<code>IndexType | str</code>): Index to search against (object or ID reference).</li> </ul>"},{"location":"DSL-Reference/Step/","title":"Step","text":"<p>Base class for components that take inputs and produce outputs.</p>"},{"location":"DSL-Reference/Step/#members","title":"Members","text":"<ul> <li>id (<code>str</code>): Unique ID of this component.</li> <li>inputs (<code>list[Variable | str] | None</code>): Input variables required by this step.</li> <li>outputs (<code>list[Variable | str] | None</code>): Variable where output is stored.</li> </ul>"},{"location":"DSL-Reference/StructuralTypeEnum/","title":"StructuralTypeEnum","text":"<p>Represents a structured type that can be used in the DSL.</p>"},{"location":"DSL-Reference/StructuralTypeEnum/#members","title":"Members","text":"<ul> <li>array: Represents a structured type that can be used in the DSL.</li> <li>name: The name of the Enum member.</li> <li>object: Represents a structured type that can be used in the DSL.</li> <li>value: The value of the Enum member.</li> </ul>"},{"location":"DSL-Reference/TelemetrySink/","title":"TelemetrySink","text":"<p>Defines an observability endpoint for collecting telemetry data from the QType runtime.</p>"},{"location":"DSL-Reference/TelemetrySink/#members","title":"Members","text":"<ul> <li>id (<code>str</code>): Unique ID of the telemetry sink configuration.</li> <li>auth (<code>AuthorizationProvider | str | None</code>): AuthorizationProvider used to authenticate telemetry data transmission.</li> <li>endpoint (<code>str</code>): URL endpoint where telemetry data will be sent.</li> </ul>"},{"location":"DSL-Reference/Tool/","title":"Tool","text":"<pre><code>Base class for callable functions or external operations available to the model or as a step in a flow.\n</code></pre>"},{"location":"DSL-Reference/Tool/#members","title":"Members","text":"<ul> <li>name (<code>str</code>): Name of the tool function.</li> <li>description (<code>str</code>): Description of what the tool does.</li> </ul>"},{"location":"DSL-Reference/ToolList/","title":"ToolList","text":"<p>Schema for a standalone list of tools.</p>"},{"location":"DSL-Reference/ToolList/#members","title":"Members","text":"<ul> <li>root (<code>list[APITool | PythonFunctionTool]</code>): (No documentation available.)</li> </ul>"},{"location":"DSL-Reference/TypeDefinitionBase/","title":"TypeDefinitionBase","text":"<p>No documentation available.</p>"},{"location":"DSL-Reference/TypeDefinitionBase/#members","title":"Members","text":"<ul> <li>id (<code>str</code>): The unique identifier for this custom type.</li> <li>kind (<code>StructuralTypeEnum</code>): The kind of structure this type represents (object/array).</li> <li>description (<code>str | None</code>): A description of what this type represents.</li> </ul>"},{"location":"DSL-Reference/TypeList/","title":"TypeList","text":"<p>Schema for a standalone list of type definitions.</p>"},{"location":"DSL-Reference/TypeList/#members","title":"Members","text":"<ul> <li>root (<code>list[ObjectTypeDefinition | ArrayTypeDefinition]</code>): (No documentation available.)</li> </ul>"},{"location":"DSL-Reference/Variable/","title":"Variable","text":"<p>Schema for a variable that can serve as input, output, or parameter within the DSL.</p>"},{"location":"DSL-Reference/Variable/#members","title":"Members","text":"<ul> <li>id (<code>str</code>): Unique ID of the variable. Referenced in prompts or steps.</li> <li>type (<code>VariableType | str</code>): Type of data expected or produced.</li> </ul>"},{"location":"DSL-Reference/VariableList/","title":"VariableList","text":"<p>Schema for a standalone list of variables.</p>"},{"location":"DSL-Reference/VariableList/#members","title":"Members","text":"<ul> <li>root (<code>list[Variable]</code>): (No documentation available.)</li> </ul>"},{"location":"DSL-Reference/VectorIndex/","title":"VectorIndex","text":"<p>Vector database index for similarity search using embeddings.</p>"},{"location":"DSL-Reference/VectorIndex/#members","title":"Members","text":"<ul> <li>embedding_model (<code>EmbeddingModel | str</code>): Embedding model used to vectorize queries and documents.</li> </ul>"},{"location":"DSL-Reference/VectorSearch/","title":"VectorSearch","text":"<p>Performs vector similarity search against a vector index.</p>"},{"location":"DSL-Reference/VectorSearch/#members","title":"Members","text":"<ul> <li>default_top_k (<code>int | None</code>): Number of top results to retrieve if not provided in the inputs.</li> </ul>"}]}