---
import Layout from '../layouts/Layout.astro';
---

<Layout title="QType Flows">
    <main class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold mb-8" id="page-title">Loading...</h1>
        
        <div id="flows-container">
            <p class="text-gray-600">Loading available flows...</p>
        </div>
    </main>
</Layout>

<script>
    import { getAvailableFlows, executeFlow, getApiTitle, getOpenApiSpec } from '../lib/api.ts';
    
    interface FlowInput {
        [key: string]: any;
    }
    
    interface FlowInfo {
        id: string;
        summary?: string;
        description?: string;
    }

    async function loadFlows() {
        const container = document.getElementById('flows-container');
        const titleElement = document.getElementById('page-title');
        if (!container || !titleElement) return;

        try {
            // Fetch OpenAPI spec once and extract both title and flows
            const spec = await getOpenApiSpec();
            
            // Set the API title
            const apiTitle = spec.info?.title || 'QType API';
            titleElement.textContent = apiTitle;
            document.title = apiTitle; // Also update the browser tab title
            
            // Extract flows from the spec
            const flows: FlowInfo[] = [];
            for (const [path, methods] of Object.entries(spec.paths || {})) {
                const match = path.match(/^\/flows\/(.+)$/);
                if (match && methods && typeof methods === 'object') {
                    const post = (methods as any).post;
                    if (post) {
                        flows.push({
                            id: match[1],
                            summary: post.summary,
                            description: post.description,
                        });
                    }
                }
            }
            
            if (flows.length === 0) {
                container.innerHTML = '<p class="text-yellow-600">No flows available. Make sure your QType API is running.</p>';
                return;
            }

            container.innerHTML = flows.map(flow => `
                <div class="bg-white shadow-md rounded-lg p-6 mb-4 border">
                    <h2 class="text-xl font-semibold mb-2">${flow.id}</h2>
                    ${flow.summary ? `<p class="text-gray-600 mb-2">${flow.summary}</p>` : ''}
                    ${flow.description ? `<p class="text-sm text-gray-500 mb-4">${flow.description}</p>` : ''}
                    
                    <div class="flow-inputs mb-4" id="inputs-${flow.id}">
                        <label class="block text-sm font-medium text-gray-700 mb-2">
                            Input (JSON):
                        </label>
                        <textarea 
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            rows="3" 
                            placeholder='{"key": "value"}'
                            id="input-${flow.id}"
                        ></textarea>
                    </div>
                    
                    <button 
                        class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                        onclick="runFlow('${flow.id}')"
                    >
                        Run Flow
                    </button>
                    
                    <div class="mt-4 hidden" id="result-${flow.id}">
                        <h3 class="text-lg font-medium mb-2">Result:</h3>
                        <pre class="bg-gray-100 p-4 rounded-md overflow-x-auto text-sm"></pre>
                    </div>
                    
                    <div class="mt-4 hidden" id="error-${flow.id}">
                        <h3 class="text-lg font-medium mb-2 text-red-600">Error:</h3>
                        <pre class="bg-red-50 p-4 rounded-md overflow-x-auto text-sm text-red-700"></pre>
                    </div>
                </div>
            `).join('');

        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Unknown error';
            container.innerHTML = `<p class="text-red-600">Error loading flows: ${errorMessage}</p>`;
        }
    }

    // Make runFlow available globally
    (window as any).runFlow = async function(flowId: string) {
        const inputElement = document.getElementById(`input-${flowId}`) as HTMLTextAreaElement;
        const resultElement = document.getElementById(`result-${flowId}`);
        const errorElement = document.getElementById(`error-${flowId}`);
        
        if (!inputElement || !resultElement || !errorElement) return;

        // Hide previous results
        resultElement.classList.add('hidden');
        errorElement.classList.add('hidden');

        try {
            let inputs: FlowInput = {};
            
            const inputText = inputElement.value.trim();
            if (inputText) {
                inputs = JSON.parse(inputText);
            }

            const result = await executeFlow(flowId, inputs);
            
            resultElement.querySelector('pre')!.textContent = JSON.stringify(result, null, 2);
            resultElement.classList.remove('hidden');
            
        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Unknown error';
            errorElement.querySelector('pre')!.textContent = errorMessage;
            errorElement.classList.remove('hidden');
        }
    };

    // Load flows when the page loads
    document.addEventListener('DOMContentLoaded', loadFlows);
</script>
