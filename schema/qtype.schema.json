{
  "$defs": {
    "APIKeyAuthProvider": {
      "additionalProperties": false,
      "description": "API key-based authentication provider.",
      "properties": {
        "id": {
          "description": "Unique ID of the authorization configuration.",
          "title": "Id",
          "type": "string"
        },
        "type": {
          "const": "api_key",
          "default": "api_key",
          "title": "Type",
          "type": "string"
        },
        "api_key": {
          "description": "API key for authentication.",
          "title": "Api Key",
          "type": "string"
        },
        "host": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Base URL or domain of the provider.",
          "title": "Host"
        }
      },
      "required": [
        "id",
        "api_key"
      ],
      "title": "APIKeyAuthProvider",
      "type": "object"
    },
    "APITool": {
      "additionalProperties": false,
      "description": "Tool that invokes an API endpoint.",
      "properties": {
        "id": {
          "description": "Unique ID of this component.",
          "title": "Id",
          "type": "string"
        },
        "name": {
          "description": "Name of the tool function.",
          "title": "Name",
          "type": "string"
        },
        "description": {
          "description": "Description of what the tool does.",
          "title": "Description",
          "type": "string"
        },
        "inputs": {
          "anyOf": [
            {
              "additionalProperties": {
                "$ref": "#/$defs/ToolParameter"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input parameters required by this tool.",
          "title": "Inputs"
        },
        "outputs": {
          "anyOf": [
            {
              "additionalProperties": {
                "$ref": "#/$defs/ToolParameter"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Output parameters produced by this tool.",
          "title": "Outputs"
        },
        "endpoint": {
          "description": "API endpoint URL to call.",
          "title": "Endpoint",
          "type": "string"
        },
        "method": {
          "default": "GET",
          "description": "HTTP method to use (GET, POST, PUT, DELETE, etc.).",
          "title": "Method",
          "type": "string"
        },
        "auth": {
          "anyOf": [
            {
              "$ref": "#/$defs/APIKeyAuthProvider"
            },
            {
              "$ref": "#/$defs/BearerTokenAuthProvider"
            },
            {
              "$ref": "#/$defs/AWSAuthProvider"
            },
            {
              "$ref": "#/$defs/OAuth2AuthProvider"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional AuthorizationProvider for API authentication.",
          "title": "Auth"
        },
        "headers": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional HTTP headers to include in the request.",
          "title": "Headers"
        },
        "parameters": {
          "anyOf": [
            {
              "additionalProperties": {
                "$ref": "#/$defs/ToolParameter"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Output parameters produced by this tool.",
          "title": "Parameters"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "endpoint"
      ],
      "title": "APITool",
      "type": "object"
    },
    "AWSAuthProvider": {
      "additionalProperties": false,
      "description": "AWS authentication provider supporting multiple credential methods.",
      "properties": {
        "id": {
          "description": "Unique ID of the authorization configuration.",
          "title": "Id",
          "type": "string"
        },
        "type": {
          "const": "aws",
          "default": "aws",
          "title": "Type",
          "type": "string"
        },
        "access_key_id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "AWS access key ID.",
          "title": "Access Key Id"
        },
        "secret_access_key": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "AWS secret access key.",
          "title": "Secret Access Key"
        },
        "session_token": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "AWS session token for temporary credentials.",
          "title": "Session Token"
        },
        "profile_name": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "AWS profile name from credentials file.",
          "title": "Profile Name"
        },
        "role_arn": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "ARN of the role to assume.",
          "title": "Role Arn"
        },
        "role_session_name": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Session name for role assumption.",
          "title": "Role Session Name"
        },
        "external_id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "External ID for role assumption.",
          "title": "External Id"
        },
        "region": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "AWS region.",
          "title": "Region"
        }
      },
      "required": [
        "id"
      ],
      "title": "AWSAuthProvider",
      "type": "object"
    },
    "Agent": {
      "additionalProperties": false,
      "description": "Defines an agent that can perform tasks and make decisions based on user input and context.",
      "properties": {
        "id": {
          "description": "Unique ID of this component.",
          "title": "Id",
          "type": "string"
        },
        "cardinality": {
          "$ref": "#/$defs/StepCardinality",
          "default": "one",
          "description": "Does this step emit 1 (one) or 0...N (many) instances of the outputs?"
        },
        "inputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input variables required by this step.",
          "title": "Inputs"
        },
        "outputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Variable where output is stored.",
          "title": "Outputs"
        },
        "memory": {
          "anyOf": [
            {
              "$ref": "#/$defs/Memory"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Memory object to retain context across interactions.",
          "title": "Memory"
        },
        "model": {
          "anyOf": [
            {
              "$ref": "#/$defs/EmbeddingModel"
            },
            {
              "$ref": "#/$defs/Model"
            },
            {
              "type": "string"
            }
          ],
          "description": "The model to use for inference.",
          "title": "Model"
        },
        "system_message": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional system message to set the context for the model.",
          "title": "System Message"
        },
        "tools": {
          "description": "List of tools available to the agent.",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/APITool"
              },
              {
                "$ref": "#/$defs/PythonFunctionTool"
              },
              {
                "type": "string"
              }
            ]
          },
          "title": "Tools",
          "type": "array"
        }
      },
      "required": [
        "id",
        "model",
        "tools"
      ],
      "title": "Agent",
      "type": "object"
    },
    "Application": {
      "additionalProperties": false,
      "description": "Defines a complete QType application specification.\n\nAn Application is the top-level container of the entire\nprogram in a QType YAML file. It serves as the blueprint for your\nAI-powered application, containing all the models, flows, tools, data sources,\nand configuration needed to run your program. Think of it as the main entry\npoint that ties together all components into a cohesive,\nexecutable system.",
      "properties": {
        "id": {
          "description": "Unique ID of the application.",
          "title": "Id",
          "type": "string"
        },
        "description": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional description of the application.",
          "title": "Description"
        },
        "memories": {
          "anyOf": [
            {
              "items": {
                "$ref": "#/$defs/Memory"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "List of memory definitions used in this application.",
          "title": "Memories"
        },
        "models": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/EmbeddingModel"
                  },
                  {
                    "$ref": "#/$defs/Model"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "List of models used in this application.",
          "title": "Models"
        },
        "types": {
          "anyOf": [
            {
              "items": {
                "$ref": "#/$defs/CustomType"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "List of custom types defined in this application.",
          "title": "Types"
        },
        "variables": {
          "anyOf": [
            {
              "items": {
                "$ref": "#/$defs/Variable"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "List of variables used in this application.",
          "title": "Variables"
        },
        "flows": {
          "anyOf": [
            {
              "items": {
                "$ref": "#/$defs/Flow"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "List of flows defined in this application.",
          "title": "Flows"
        },
        "auths": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/APIKeyAuthProvider"
                  },
                  {
                    "$ref": "#/$defs/BearerTokenAuthProvider"
                  },
                  {
                    "$ref": "#/$defs/AWSAuthProvider"
                  },
                  {
                    "$ref": "#/$defs/OAuth2AuthProvider"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "List of authorization providers used for API access.",
          "title": "Auths"
        },
        "tools": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/APITool"
                  },
                  {
                    "$ref": "#/$defs/PythonFunctionTool"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "List of tools available in this application.",
          "title": "Tools"
        },
        "indexes": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/DocumentIndex"
                  },
                  {
                    "$ref": "#/$defs/VectorIndex"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "List of indexes available for search operations.",
          "title": "Indexes"
        },
        "telemetry": {
          "anyOf": [
            {
              "$ref": "#/$defs/TelemetrySink"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional telemetry sink for observability."
        },
        "references": {
          "anyOf": [
            {
              "items": {
                "$ref": "#/$defs/Document"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "List of other q-type documents you may use. This allows modular composition and reuse of components across applications.",
          "title": "References"
        }
      },
      "required": [
        "id"
      ],
      "title": "Application",
      "type": "object"
    },
    "AuthorizationProviderList": {
      "description": "Schema for a standalone list of authorization providers.",
      "items": {
        "anyOf": [
          {
            "$ref": "#/$defs/APIKeyAuthProvider"
          },
          {
            "$ref": "#/$defs/BearerTokenAuthProvider"
          },
          {
            "$ref": "#/$defs/AWSAuthProvider"
          },
          {
            "$ref": "#/$defs/OAuth2AuthProvider"
          }
        ]
      },
      "title": "AuthorizationProviderList",
      "type": "array"
    },
    "BearerTokenAuthProvider": {
      "additionalProperties": false,
      "description": "Bearer token authentication provider.",
      "properties": {
        "id": {
          "description": "Unique ID of the authorization configuration.",
          "title": "Id",
          "type": "string"
        },
        "type": {
          "const": "bearer_token",
          "default": "bearer_token",
          "title": "Type",
          "type": "string"
        },
        "token": {
          "description": "Bearer token for authentication.",
          "title": "Token",
          "type": "string"
        }
      },
      "required": [
        "id",
        "token"
      ],
      "title": "BearerTokenAuthProvider",
      "type": "object"
    },
    "Condition": {
      "additionalProperties": false,
      "description": "Conditional logic gate within a flow. Supports branching logic for execution based on variable values.",
      "properties": {
        "id": {
          "description": "Unique ID of this component.",
          "title": "Id",
          "type": "string"
        },
        "cardinality": {
          "$ref": "#/$defs/StepCardinality",
          "default": "one",
          "description": "Does this step emit 1 (one) or 0...N (many) instances of the outputs?"
        },
        "inputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input variables required by this step.",
          "title": "Inputs"
        },
        "outputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Variable where output is stored.",
          "title": "Outputs"
        },
        "else": {
          "anyOf": [
            {
              "$ref": "#/$defs/Agent"
            },
            {
              "$ref": "#/$defs/Condition"
            },
            {
              "$ref": "#/$defs/Decoder"
            },
            {
              "$ref": "#/$defs/DocumentSearch"
            },
            {
              "$ref": "#/$defs/FileSink"
            },
            {
              "$ref": "#/$defs/FileSource"
            },
            {
              "$ref": "#/$defs/Flow"
            },
            {
              "$ref": "#/$defs/IndexUpsert"
            },
            {
              "$ref": "#/$defs/Invoke"
            },
            {
              "$ref": "#/$defs/LLMInference"
            },
            {
              "$ref": "#/$defs/PromptTemplate"
            },
            {
              "$ref": "#/$defs/SQLSource"
            },
            {
              "$ref": "#/$defs/Sink"
            },
            {
              "$ref": "#/$defs/VectorSearch"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional step to run if condition fails.",
          "title": "Else"
        },
        "equals": {
          "anyOf": [
            {
              "$ref": "#/$defs/Variable"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Match condition for equality check.",
          "title": "Equals"
        },
        "then": {
          "anyOf": [
            {
              "$ref": "#/$defs/Agent"
            },
            {
              "$ref": "#/$defs/Condition"
            },
            {
              "$ref": "#/$defs/Decoder"
            },
            {
              "$ref": "#/$defs/DocumentSearch"
            },
            {
              "$ref": "#/$defs/FileSink"
            },
            {
              "$ref": "#/$defs/FileSource"
            },
            {
              "$ref": "#/$defs/Flow"
            },
            {
              "$ref": "#/$defs/IndexUpsert"
            },
            {
              "$ref": "#/$defs/Invoke"
            },
            {
              "$ref": "#/$defs/LLMInference"
            },
            {
              "$ref": "#/$defs/PromptTemplate"
            },
            {
              "$ref": "#/$defs/SQLSource"
            },
            {
              "$ref": "#/$defs/Sink"
            },
            {
              "$ref": "#/$defs/VectorSearch"
            },
            {
              "type": "string"
            }
          ],
          "description": "Step to run if condition matches.",
          "title": "Then"
        }
      },
      "required": [
        "id",
        "then"
      ],
      "title": "Condition",
      "type": "object"
    },
    "CustomType": {
      "additionalProperties": false,
      "description": "A simple declaration of a custom data type by the user.",
      "properties": {
        "id": {
          "title": "Id",
          "type": "string"
        },
        "description": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Description"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Properties"
        }
      },
      "required": [
        "id",
        "properties"
      ],
      "title": "CustomType",
      "type": "object"
    },
    "Decoder": {
      "additionalProperties": false,
      "description": "Defines a step that decodes string data into structured outputs.\n\nIf parsing fails, the step will raise an error and halt execution.\nUse conditional logic in your flow to handle potential parsing errors.",
      "properties": {
        "id": {
          "description": "Unique ID of this component.",
          "title": "Id",
          "type": "string"
        },
        "cardinality": {
          "$ref": "#/$defs/StepCardinality",
          "default": "one",
          "description": "Does this step emit 1 (one) or 0...N (many) instances of the outputs?"
        },
        "inputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input variables required by this step.",
          "title": "Inputs"
        },
        "outputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Variable where output is stored.",
          "title": "Outputs"
        },
        "format": {
          "$ref": "#/$defs/DecoderFormat",
          "default": "json",
          "description": "Format in which the decoder processes data. Defaults to JSON."
        }
      },
      "required": [
        "id"
      ],
      "title": "Decoder",
      "type": "object"
    },
    "DecoderFormat": {
      "description": "Defines the format in which the decoder step processes data.",
      "enum": [
        "json",
        "xml"
      ],
      "title": "DecoderFormat",
      "type": "string"
    },
    "Document": {
      "anyOf": [
        {
          "$ref": "#/$defs/Agent"
        },
        {
          "$ref": "#/$defs/Application"
        },
        {
          "$ref": "#/$defs/AuthorizationProviderList"
        },
        {
          "$ref": "#/$defs/Flow"
        },
        {
          "$ref": "#/$defs/IndexList"
        },
        {
          "$ref": "#/$defs/ModelList"
        },
        {
          "$ref": "#/$defs/ToolList"
        },
        {
          "$ref": "#/$defs/TypeList"
        },
        {
          "$ref": "#/$defs/VariableList"
        }
      ],
      "description": "Schema for any valid QType document structure.\n\nThis allows validation of standalone lists of components, individual components,\nor full QType application specs. Supports modular composition and reuse.",
      "title": "Document"
    },
    "DocumentIndex": {
      "additionalProperties": false,
      "description": "Document search index for text-based search (e.g., Elasticsearch, OpenSearch).",
      "properties": {
        "id": {
          "description": "Unique ID of the index.",
          "title": "Id",
          "type": "string"
        },
        "args": {
          "anyOf": [
            {
              "additionalProperties": true,
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Index-specific configuration and connection parameters.",
          "title": "Args"
        },
        "auth": {
          "anyOf": [
            {
              "$ref": "#/$defs/APIKeyAuthProvider"
            },
            {
              "$ref": "#/$defs/BearerTokenAuthProvider"
            },
            {
              "$ref": "#/$defs/AWSAuthProvider"
            },
            {
              "$ref": "#/$defs/OAuth2AuthProvider"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "AuthorizationProvider for accessing the index.",
          "title": "Auth"
        },
        "name": {
          "description": "Name of the index/collection/table.",
          "title": "Name",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "title": "DocumentIndex",
      "type": "object"
    },
    "DocumentSearch": {
      "additionalProperties": false,
      "description": "Performs document search against a document index.",
      "properties": {
        "id": {
          "description": "Unique ID of this component.",
          "title": "Id",
          "type": "string"
        },
        "cardinality": {
          "$ref": "#/$defs/StepCardinality",
          "default": "one",
          "description": "Does this step emit 1 (one) or 0...N (many) instances of the outputs?"
        },
        "inputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input variables required by this step.",
          "title": "Inputs"
        },
        "outputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Variable where output is stored.",
          "title": "Outputs"
        },
        "filters": {
          "anyOf": [
            {
              "additionalProperties": true,
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional filters to apply during search.",
          "title": "Filters"
        },
        "index": {
          "anyOf": [
            {
              "$ref": "#/$defs/DocumentIndex"
            },
            {
              "$ref": "#/$defs/VectorIndex"
            },
            {
              "type": "string"
            }
          ],
          "description": "Index to search against (object or ID reference).",
          "title": "Index"
        }
      },
      "required": [
        "id",
        "index"
      ],
      "title": "DocumentSearch",
      "type": "object"
    },
    "EmbeddingModel": {
      "additionalProperties": false,
      "description": "Describes an embedding model configuration, extending the base Model class.",
      "properties": {
        "id": {
          "description": "Unique ID for the model.",
          "title": "Id",
          "type": "string"
        },
        "auth": {
          "anyOf": [
            {
              "$ref": "#/$defs/APIKeyAuthProvider"
            },
            {
              "$ref": "#/$defs/BearerTokenAuthProvider"
            },
            {
              "$ref": "#/$defs/AWSAuthProvider"
            },
            {
              "$ref": "#/$defs/OAuth2AuthProvider"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "AuthorizationProvider used for model access.",
          "title": "Auth"
        },
        "inference_params": {
          "anyOf": [
            {
              "additionalProperties": true,
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional inference parameters like temperature or max_tokens.",
          "title": "Inference Params"
        },
        "model_id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The specific model name or ID for the provider. If None, id is used",
          "title": "Model Id"
        },
        "provider": {
          "description": "Name of the provider, e.g., openai or anthropic.",
          "title": "Provider",
          "type": "string"
        },
        "dimensions": {
          "description": "Dimensionality of the embedding vectors produced by this model.",
          "title": "Dimensions",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "provider",
        "dimensions"
      ],
      "title": "EmbeddingModel",
      "type": "object"
    },
    "FileSink": {
      "additionalProperties": false,
      "description": "File sink that writes data to a file using fsspec-compatible URIs.",
      "properties": {
        "id": {
          "description": "Unique ID of the data sink.",
          "title": "Id",
          "type": "string"
        },
        "cardinality": {
          "const": "one",
          "default": "one",
          "description": "Flows always emit exactly one instance of the outputs.",
          "title": "Cardinality",
          "type": "string"
        },
        "inputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input variables required by this step.",
          "title": "Inputs"
        },
        "outputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Variable where output is stored.",
          "title": "Outputs"
        },
        "path": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "fsspec-compatible URI to write to. If None, expects 'path' input variable.",
          "title": "Path"
        }
      },
      "required": [
        "id"
      ],
      "title": "FileSink",
      "type": "object"
    },
    "FileSource": {
      "additionalProperties": false,
      "description": "File source that reads data from a file using fsspec-compatible URIs.",
      "properties": {
        "id": {
          "description": "Unique ID of the data source.",
          "title": "Id",
          "type": "string"
        },
        "cardinality": {
          "const": "many",
          "default": "many",
          "description": "Sources always emit 0...N instances of the outputs.",
          "title": "Cardinality",
          "type": "string"
        },
        "inputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input variables required by this step.",
          "title": "Inputs"
        },
        "outputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Variable where output is stored.",
          "title": "Outputs"
        },
        "path": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "fsspec-compatible URI to read from. If None, expects 'path' input variable.",
          "title": "Path"
        }
      },
      "required": [
        "id"
      ],
      "title": "FileSource",
      "type": "object"
    },
    "Flow": {
      "additionalProperties": false,
      "description": "Defines a flow of steps that can be executed in sequence or parallel.\nIf input or output variables are not specified, they are inferred from\nthe first and last step, respectively.",
      "properties": {
        "id": {
          "description": "Unique ID of this component.",
          "title": "Id",
          "type": "string"
        },
        "cardinality": {
          "$ref": "#/$defs/StepCardinality",
          "default": "auto",
          "description": "The cardinality of the flow, inferred from its steps when set to 'auto'."
        },
        "inputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input variables required by this step.",
          "title": "Inputs"
        },
        "outputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Variable where output is stored.",
          "title": "Outputs"
        },
        "description": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional description of the flow.",
          "title": "Description"
        },
        "mode": {
          "default": "Complete",
          "enum": [
            "Complete",
            "Chat"
          ],
          "title": "Mode",
          "type": "string"
        },
        "steps": {
          "description": "List of steps or step IDs.",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/Agent"
              },
              {
                "$ref": "#/$defs/Condition"
              },
              {
                "$ref": "#/$defs/Decoder"
              },
              {
                "$ref": "#/$defs/DocumentSearch"
              },
              {
                "$ref": "#/$defs/FileSink"
              },
              {
                "$ref": "#/$defs/FileSource"
              },
              {
                "$ref": "#/$defs/Flow"
              },
              {
                "$ref": "#/$defs/IndexUpsert"
              },
              {
                "$ref": "#/$defs/Invoke"
              },
              {
                "$ref": "#/$defs/LLMInference"
              },
              {
                "$ref": "#/$defs/PromptTemplate"
              },
              {
                "$ref": "#/$defs/SQLSource"
              },
              {
                "$ref": "#/$defs/Sink"
              },
              {
                "$ref": "#/$defs/VectorSearch"
              },
              {
                "type": "string"
              }
            ]
          },
          "title": "Steps",
          "type": "array"
        }
      },
      "required": [
        "id"
      ],
      "title": "Flow",
      "type": "object"
    },
    "IndexList": {
      "description": "Schema for a standalone list of indexes.",
      "items": {
        "anyOf": [
          {
            "$ref": "#/$defs/DocumentIndex"
          },
          {
            "$ref": "#/$defs/VectorIndex"
          }
        ]
      },
      "title": "IndexList",
      "type": "array"
    },
    "IndexUpsert": {
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "Unique ID of the data sink.",
          "title": "Id",
          "type": "string"
        },
        "cardinality": {
          "const": "one",
          "default": "one",
          "description": "Flows always emit exactly one instance of the outputs.",
          "title": "Cardinality",
          "type": "string"
        },
        "inputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input variables required by this step.",
          "title": "Inputs"
        },
        "outputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Variable where output is stored.",
          "title": "Outputs"
        },
        "index": {
          "anyOf": [
            {
              "$ref": "#/$defs/DocumentIndex"
            },
            {
              "$ref": "#/$defs/VectorIndex"
            },
            {
              "type": "string"
            }
          ],
          "description": "Index to upsert into (object or ID reference).",
          "title": "Index"
        }
      },
      "required": [
        "id",
        "index"
      ],
      "title": "IndexUpsert",
      "type": "object"
    },
    "Invoke": {
      "additionalProperties": false,
      "description": "Invokes a tool with input and output bindings.",
      "properties": {
        "id": {
          "description": "Unique ID of this component.",
          "title": "Id",
          "type": "string"
        },
        "cardinality": {
          "$ref": "#/$defs/StepCardinality",
          "default": "one",
          "description": "Does this step emit 1 (one) or 0...N (many) instances of the outputs?"
        },
        "inputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input variables required by this step.",
          "title": "Inputs"
        },
        "outputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Variable where output is stored.",
          "title": "Outputs"
        },
        "tool": {
          "anyOf": [
            {
              "$ref": "#/$defs/APITool"
            },
            {
              "$ref": "#/$defs/PythonFunctionTool"
            },
            {
              "type": "string"
            }
          ],
          "description": "Tool to invoke.",
          "title": "Tool"
        },
        "input_bindings": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Mapping from step input IDs to tool input parameter names.",
          "title": "Input Bindings",
          "type": "object"
        },
        "output_bindings": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Mapping from tool output parameter names to step output IDs.",
          "title": "Output Bindings",
          "type": "object"
        }
      },
      "required": [
        "id",
        "tool",
        "input_bindings",
        "output_bindings"
      ],
      "title": "Invoke",
      "type": "object"
    },
    "LLMInference": {
      "additionalProperties": false,
      "description": "Defines a step that performs inference using a language model.\nIt can take input variables and produce output variables based on the model's response.",
      "properties": {
        "id": {
          "description": "Unique ID of this component.",
          "title": "Id",
          "type": "string"
        },
        "cardinality": {
          "$ref": "#/$defs/StepCardinality",
          "default": "one",
          "description": "Does this step emit 1 (one) or 0...N (many) instances of the outputs?"
        },
        "inputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input variables required by this step.",
          "title": "Inputs"
        },
        "outputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Variable where output is stored.",
          "title": "Outputs"
        },
        "memory": {
          "anyOf": [
            {
              "$ref": "#/$defs/Memory"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Memory object to retain context across interactions.",
          "title": "Memory"
        },
        "model": {
          "anyOf": [
            {
              "$ref": "#/$defs/EmbeddingModel"
            },
            {
              "$ref": "#/$defs/Model"
            },
            {
              "type": "string"
            }
          ],
          "description": "The model to use for inference.",
          "title": "Model"
        },
        "system_message": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional system message to set the context for the model.",
          "title": "System Message"
        }
      },
      "required": [
        "id",
        "model"
      ],
      "title": "LLMInference",
      "type": "object"
    },
    "ListType": {
      "description": "Represents a list type with a specific element type.",
      "properties": {
        "element_type": {
          "anyOf": [
            {
              "$ref": "#/$defs/PrimitiveTypeEnum"
            },
            {
              "type": "string"
            }
          ],
          "description": "Type of elements in the list (primitive type or custom type reference)",
          "title": "Element Type"
        }
      },
      "required": [
        "element_type"
      ],
      "title": "ListType",
      "type": "object"
    },
    "Memory": {
      "additionalProperties": false,
      "description": "Session or persistent memory used to store relevant conversation or state data across steps or turns.",
      "properties": {
        "id": {
          "description": "Unique ID of the memory block.",
          "title": "Id",
          "type": "string"
        },
        "token_limit": {
          "default": 100000,
          "description": "Maximum number of tokens to store in memory.",
          "title": "Token Limit",
          "type": "integer"
        },
        "chat_history_token_ratio": {
          "default": 0.7,
          "description": "Ratio of chat history tokens to total memory tokens.",
          "title": "Chat History Token Ratio",
          "type": "number"
        },
        "token_flush_size": {
          "default": 3000,
          "description": "Size of memory to flush when it exceeds the token limit.",
          "title": "Token Flush Size",
          "type": "integer"
        }
      },
      "required": [
        "id"
      ],
      "title": "Memory",
      "type": "object"
    },
    "Model": {
      "additionalProperties": false,
      "description": "Describes a generative model configuration, including provider and model ID.",
      "properties": {
        "id": {
          "description": "Unique ID for the model.",
          "title": "Id",
          "type": "string"
        },
        "auth": {
          "anyOf": [
            {
              "$ref": "#/$defs/APIKeyAuthProvider"
            },
            {
              "$ref": "#/$defs/BearerTokenAuthProvider"
            },
            {
              "$ref": "#/$defs/AWSAuthProvider"
            },
            {
              "$ref": "#/$defs/OAuth2AuthProvider"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "AuthorizationProvider used for model access.",
          "title": "Auth"
        },
        "inference_params": {
          "anyOf": [
            {
              "additionalProperties": true,
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional inference parameters like temperature or max_tokens.",
          "title": "Inference Params"
        },
        "model_id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The specific model name or ID for the provider. If None, id is used",
          "title": "Model Id"
        },
        "provider": {
          "description": "Name of the provider, e.g., openai or anthropic.",
          "title": "Provider",
          "type": "string"
        }
      },
      "required": [
        "id",
        "provider"
      ],
      "title": "Model",
      "type": "object"
    },
    "ModelList": {
      "description": "Schema for a standalone list of models.",
      "items": {
        "anyOf": [
          {
            "$ref": "#/$defs/EmbeddingModel"
          },
          {
            "$ref": "#/$defs/Model"
          }
        ]
      },
      "title": "ModelList",
      "type": "array"
    },
    "OAuth2AuthProvider": {
      "additionalProperties": false,
      "description": "OAuth2 authentication provider.",
      "properties": {
        "id": {
          "description": "Unique ID of the authorization configuration.",
          "title": "Id",
          "type": "string"
        },
        "type": {
          "const": "oauth2",
          "default": "oauth2",
          "title": "Type",
          "type": "string"
        },
        "client_id": {
          "description": "OAuth2 client ID.",
          "title": "Client Id",
          "type": "string"
        },
        "client_secret": {
          "description": "OAuth2 client secret.",
          "title": "Client Secret",
          "type": "string"
        },
        "token_url": {
          "description": "Token endpoint URL.",
          "title": "Token Url",
          "type": "string"
        },
        "scopes": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "OAuth2 scopes required.",
          "title": "Scopes"
        }
      },
      "required": [
        "id",
        "client_id",
        "client_secret",
        "token_url"
      ],
      "title": "OAuth2AuthProvider",
      "type": "object"
    },
    "PrimitiveTypeEnum": {
      "description": "Represents the type of data a user or system input can accept within the DSL.",
      "enum": [
        "audio",
        "boolean",
        "bytes",
        "date",
        "datetime",
        "int",
        "file",
        "float",
        "image",
        "text",
        "time",
        "video"
      ],
      "title": "PrimitiveTypeEnum",
      "type": "string"
    },
    "PromptTemplate": {
      "additionalProperties": false,
      "description": "Defines a prompt template with a string format and variable bindings.\nThis is used to generate prompts dynamically based on input variables.",
      "properties": {
        "id": {
          "description": "Unique ID of this component.",
          "title": "Id",
          "type": "string"
        },
        "cardinality": {
          "$ref": "#/$defs/StepCardinality",
          "default": "one",
          "description": "Does this step emit 1 (one) or 0...N (many) instances of the outputs?"
        },
        "inputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input variables required by this step.",
          "title": "Inputs"
        },
        "outputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Variable where output is stored.",
          "title": "Outputs"
        },
        "template": {
          "description": "String template for the prompt with variable placeholders.",
          "title": "Template",
          "type": "string"
        }
      },
      "required": [
        "id",
        "template"
      ],
      "title": "PromptTemplate",
      "type": "object"
    },
    "PythonFunctionTool": {
      "additionalProperties": false,
      "description": "Tool that calls a Python function.",
      "properties": {
        "id": {
          "description": "Unique ID of this component.",
          "title": "Id",
          "type": "string"
        },
        "name": {
          "description": "Name of the tool function.",
          "title": "Name",
          "type": "string"
        },
        "description": {
          "description": "Description of what the tool does.",
          "title": "Description",
          "type": "string"
        },
        "inputs": {
          "anyOf": [
            {
              "additionalProperties": {
                "$ref": "#/$defs/ToolParameter"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input parameters required by this tool.",
          "title": "Inputs"
        },
        "outputs": {
          "anyOf": [
            {
              "additionalProperties": {
                "$ref": "#/$defs/ToolParameter"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Output parameters produced by this tool.",
          "title": "Outputs"
        },
        "function_name": {
          "description": "Name of the Python function to call.",
          "title": "Function Name",
          "type": "string"
        },
        "module_path": {
          "description": "Optional module path where the function is defined.",
          "title": "Module Path",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "function_name",
        "module_path"
      ],
      "title": "PythonFunctionTool",
      "type": "object"
    },
    "SQLSource": {
      "additionalProperties": false,
      "description": "SQL database source that executes queries and emits rows.",
      "properties": {
        "id": {
          "description": "Unique ID of the data source.",
          "title": "Id",
          "type": "string"
        },
        "cardinality": {
          "const": "many",
          "default": "many",
          "description": "Sources always emit 0...N instances of the outputs.",
          "title": "Cardinality",
          "type": "string"
        },
        "inputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input variables required by this step.",
          "title": "Inputs"
        },
        "outputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Variable where output is stored.",
          "title": "Outputs"
        },
        "query": {
          "description": "SQL query to execute. Inputs are injected as params.",
          "title": "Query",
          "type": "string"
        },
        "connection": {
          "description": "Database connection string or reference to auth provider. Typically in SQLAlchemy format.",
          "title": "Connection",
          "type": "string"
        },
        "auth": {
          "anyOf": [
            {
              "$ref": "#/$defs/APIKeyAuthProvider"
            },
            {
              "$ref": "#/$defs/BearerTokenAuthProvider"
            },
            {
              "$ref": "#/$defs/AWSAuthProvider"
            },
            {
              "$ref": "#/$defs/OAuth2AuthProvider"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional AuthorizationProvider for database authentication.",
          "title": "Auth"
        }
      },
      "required": [
        "id",
        "query",
        "connection"
      ],
      "title": "SQLSource",
      "type": "object"
    },
    "Sink": {
      "additionalProperties": false,
      "description": "Base class for data sinks",
      "properties": {
        "id": {
          "description": "Unique ID of the data sink.",
          "title": "Id",
          "type": "string"
        },
        "cardinality": {
          "const": "one",
          "default": "one",
          "description": "Flows always emit exactly one instance of the outputs.",
          "title": "Cardinality",
          "type": "string"
        },
        "inputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input variables required by this step.",
          "title": "Inputs"
        },
        "outputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Variable where output is stored.",
          "title": "Outputs"
        }
      },
      "required": [
        "id"
      ],
      "title": "Sink",
      "type": "object"
    },
    "StepCardinality": {
      "description": "Does this step emit 1 (one) or 0...N (many) items?",
      "enum": [
        "one",
        "many",
        "auto"
      ],
      "title": "StepCardinality",
      "type": "string"
    },
    "TelemetrySink": {
      "additionalProperties": false,
      "description": "Defines an observability endpoint for collecting telemetry data from the QType runtime.",
      "properties": {
        "id": {
          "description": "Unique ID of the telemetry sink configuration.",
          "title": "Id",
          "type": "string"
        },
        "auth": {
          "anyOf": [
            {
              "$ref": "#/$defs/APIKeyAuthProvider"
            },
            {
              "$ref": "#/$defs/BearerTokenAuthProvider"
            },
            {
              "$ref": "#/$defs/AWSAuthProvider"
            },
            {
              "$ref": "#/$defs/OAuth2AuthProvider"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "AuthorizationProvider used to authenticate telemetry data transmission.",
          "title": "Auth"
        },
        "endpoint": {
          "description": "URL endpoint where telemetry data will be sent.",
          "title": "Endpoint",
          "type": "string"
        }
      },
      "required": [
        "id",
        "endpoint"
      ],
      "title": "TelemetrySink",
      "type": "object"
    },
    "ToolList": {
      "description": "Schema for a standalone list of tools.",
      "items": {
        "anyOf": [
          {
            "$ref": "#/$defs/APITool"
          },
          {
            "$ref": "#/$defs/PythonFunctionTool"
          }
        ]
      },
      "title": "ToolList",
      "type": "array"
    },
    "ToolParameter": {
      "description": "Defines a tool input or output parameter with type and optional flag.",
      "properties": {
        "type": {
          "anyOf": [
            {
              "$ref": "#/$defs/PrimitiveTypeEnum"
            },
            {},
            {
              "$ref": "#/$defs/ListType"
            },
            {
              "type": "string"
            }
          ],
          "title": "Type"
        },
        "optional": {
          "default": false,
          "description": "Whether this parameter is optional",
          "title": "Optional",
          "type": "boolean"
        }
      },
      "required": [
        "type"
      ],
      "title": "ToolParameter",
      "type": "object"
    },
    "TypeList": {
      "description": "Schema for a standalone list of type definitions.",
      "items": {
        "$ref": "#/$defs/CustomType"
      },
      "title": "TypeList",
      "type": "array"
    },
    "Variable": {
      "description": "Schema for a variable that can serve as input, output, or parameter within the DSL.",
      "properties": {
        "id": {
          "description": "Unique ID of the variable. Referenced in prompts or steps.",
          "title": "Id",
          "type": "string"
        },
        "type": {
          "anyOf": [
            {
              "$ref": "#/$defs/PrimitiveTypeEnum"
            },
            {},
            {
              "$ref": "#/$defs/ListType"
            },
            {
              "type": "string"
            }
          ],
          "description": "Type of data expected or produced. Either a CustomType or domain specific type.",
          "title": "Type"
        }
      },
      "required": [
        "id",
        "type"
      ],
      "title": "Variable",
      "type": "object"
    },
    "VariableList": {
      "description": "Schema for a standalone list of variables.",
      "items": {
        "$ref": "#/$defs/Variable"
      },
      "title": "VariableList",
      "type": "array"
    },
    "VectorIndex": {
      "additionalProperties": false,
      "description": "Vector database index for similarity search using embeddings.",
      "properties": {
        "id": {
          "description": "Unique ID of the index.",
          "title": "Id",
          "type": "string"
        },
        "args": {
          "anyOf": [
            {
              "additionalProperties": true,
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Index-specific configuration and connection parameters.",
          "title": "Args"
        },
        "auth": {
          "anyOf": [
            {
              "$ref": "#/$defs/APIKeyAuthProvider"
            },
            {
              "$ref": "#/$defs/BearerTokenAuthProvider"
            },
            {
              "$ref": "#/$defs/AWSAuthProvider"
            },
            {
              "$ref": "#/$defs/OAuth2AuthProvider"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "AuthorizationProvider for accessing the index.",
          "title": "Auth"
        },
        "name": {
          "description": "Name of the index/collection/table.",
          "title": "Name",
          "type": "string"
        },
        "embedding_model": {
          "anyOf": [
            {
              "$ref": "#/$defs/EmbeddingModel"
            },
            {
              "type": "string"
            }
          ],
          "description": "Embedding model used to vectorize queries and documents.",
          "title": "Embedding Model"
        }
      },
      "required": [
        "id",
        "name",
        "embedding_model"
      ],
      "title": "VectorIndex",
      "type": "object"
    },
    "VectorSearch": {
      "additionalProperties": false,
      "description": "Performs vector similarity search against a vector index.",
      "properties": {
        "id": {
          "description": "Unique ID of this component.",
          "title": "Id",
          "type": "string"
        },
        "cardinality": {
          "$ref": "#/$defs/StepCardinality",
          "default": "one",
          "description": "Does this step emit 1 (one) or 0...N (many) instances of the outputs?"
        },
        "inputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input variables required by this step.",
          "title": "Inputs"
        },
        "outputs": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Variable"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Variable where output is stored.",
          "title": "Outputs"
        },
        "filters": {
          "anyOf": [
            {
              "additionalProperties": true,
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional filters to apply during search.",
          "title": "Filters"
        },
        "index": {
          "anyOf": [
            {
              "$ref": "#/$defs/DocumentIndex"
            },
            {
              "$ref": "#/$defs/VectorIndex"
            },
            {
              "type": "string"
            }
          ],
          "description": "Index to search against (object or ID reference).",
          "title": "Index"
        },
        "default_top_k": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": 50,
          "description": "Number of top results to retrieve if not provided in the inputs.",
          "title": "Default Top K"
        }
      },
      "required": [
        "id",
        "index"
      ],
      "title": "VectorSearch",
      "type": "object"
    },
    "qtype_include_tag": {
      "type": "string",
      "pattern": "^!include\\s+.+",
      "description": "Include external YAML file using QType's !include tag"
    },
    "qtype_include_raw_tag": {
      "type": "string",
      "pattern": "^!include_raw\\s+.+",
      "description": "Include raw text file using QType's !include_raw tag"
    },
    "qtype_env_var": {
      "type": "string",
      "pattern": "^.*\\$\\{[^}:]+(?::[^}]*)?\\}.*$",
      "description": "String with environment variable substitution using ${VAR_NAME} or ${VAR_NAME:default} syntax"
    }
  },
  "$ref": "#/$defs/Document",
  "$schema": "http://json-schema.org/draft-07/schema#"
}