{
  "$defs": {
    "Agent": {
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "Unique ID of this component.",
          "title": "Id",
          "type": "string"
        },
        "inputs": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input variable IDs required by this component.",
          "title": "Inputs"
        },
        "outputs": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Variable IDs where output is stored.",
          "title": "Outputs"
        },
        "type": {
          "const": "agent",
          "default": "agent",
          "title": "Type",
          "type": "string"
        },
        "model": {
          "description": "The id of the model for this agent to use.",
          "title": "Model",
          "type": "string"
        },
        "prompt": {
          "description": "The id of the prompt for this agent to use",
          "title": "Prompt",
          "type": "string"
        },
        "tools": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Tools that this agent has access to",
          "title": "Tools"
        }
      },
      "required": [
        "id",
        "model",
        "prompt"
      ],
      "title": "Agent",
      "type": "object"
    },
    "AuthorizationProvider": {
      "additionalProperties": false,
      "description": "Defines how tools or providers authenticate with APIs, such as OAuth2 or API keys.",
      "properties": {
        "id": {
          "description": "Unique ID of the authorization configuration.",
          "title": "Id",
          "type": "string"
        },
        "type": {
          "description": "Authorization method, e.g., 'oauth2' or 'api_key'.",
          "title": "Type",
          "type": "string"
        },
        "host": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Base URL or domain of the provider.",
          "title": "Host"
        },
        "client_id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "OAuth2 client ID.",
          "title": "Client Id"
        },
        "client_secret": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "OAuth2 client secret.",
          "title": "Client Secret"
        },
        "token_url": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Token endpoint URL.",
          "title": "Token Url"
        },
        "scopes": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "OAuth2 scopes required.",
          "title": "Scopes"
        },
        "api_key": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "API key if using token-based auth.",
          "title": "Api Key"
        }
      },
      "required": [
        "id",
        "type"
      ],
      "title": "AuthorizationProvider",
      "type": "object"
    },
    "Condition": {
      "additionalProperties": false,
      "description": "Conditional logic gate within a flow. Supports branching logic for execution based on variable values.",
      "properties": {
        "if_var": {
          "description": "ID of the variable to evaluate.",
          "title": "If Var",
          "type": "string"
        },
        "equals": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            },
            {
              "type": "number"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Match condition for equality check.",
          "title": "Equals"
        },
        "exists": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Condition to check existence of a variable.",
          "title": "Exists"
        },
        "then": {
          "description": "List of step IDs to run if condition matches.",
          "items": {
            "type": "string"
          },
          "title": "Then",
          "type": "array"
        },
        "else": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional list of step IDs to run if condition fails.",
          "title": "Else"
        }
      },
      "required": [
        "if_var",
        "then"
      ],
      "title": "Condition",
      "type": "object"
    },
    "Feedback": {
      "additionalProperties": false,
      "description": "Schema to define how user feedback is collected, structured, and optionally used to guide future prompts.",
      "properties": {
        "id": {
          "description": "Unique ID of the feedback config.",
          "title": "Id",
          "type": "string"
        },
        "type": {
          "$ref": "#/$defs/FeedbackType",
          "description": "Feedback mechanism type."
        },
        "question": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Question to show user for qualitative feedback.",
          "title": "Question"
        },
        "prompt": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "ID of prompt used to generate a follow-up based on feedback.",
          "title": "Prompt"
        }
      },
      "required": [
        "id",
        "type"
      ],
      "title": "Feedback",
      "type": "object"
    },
    "FeedbackType": {
      "description": "Enum of supported feedback mechanisms such as thumbs, stars, or text responses.",
      "enum": [
        "thumbs",
        "star",
        "text",
        "rating",
        "choice",
        "boolean"
      ],
      "title": "FeedbackType",
      "type": "string"
    },
    "Flow": {
      "additionalProperties": false,
      "description": "Composable structure that defines the interaction logic for a generative AI application.\nSupports branching, memory, and sequencing of steps.",
      "properties": {
        "id": {
          "description": "Unique ID of this component.",
          "title": "Id",
          "type": "string"
        },
        "inputs": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input variable IDs required by this component.",
          "title": "Inputs"
        },
        "outputs": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Variable IDs where output is stored.",
          "title": "Outputs"
        },
        "mode": {
          "$ref": "#/$defs/FlowMode",
          "description": "Interaction mode for the flow."
        },
        "steps": {
          "description": "List of steps or nested step IDs.",
          "items": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "agent": "#/$defs/Agent",
                    "tool": "#/$defs/Tool",
                    "vector_retrieve": "#/$defs/VectorDBRetriever"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/$defs/Agent"
                  },
                  {
                    "$ref": "#/$defs/Tool"
                  },
                  {
                    "$ref": "#/$defs/VectorDBRetriever"
                  }
                ]
              },
              {
                "type": "string"
              }
            ]
          },
          "title": "Steps",
          "type": "array"
        },
        "conditions": {
          "anyOf": [
            {
              "items": {
                "$ref": "#/$defs/Condition"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional conditional logic within the flow.",
          "title": "Conditions"
        },
        "memory": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "List of memory IDs to include (chat mode only).",
          "title": "Memory"
        }
      },
      "required": [
        "id",
        "mode"
      ],
      "title": "Flow",
      "type": "object"
    },
    "FlowMode": {
      "description": "Execution context for the flow. `chat` maintains history, while `complete` operates statelessly.",
      "enum": [
        "chat",
        "complete"
      ],
      "title": "FlowMode",
      "type": "string"
    },
    "Memory": {
      "additionalProperties": false,
      "description": "Session or persistent memory used to store relevant conversation or state data across steps or turns.",
      "properties": {
        "id": {
          "description": "Unique ID of the memory block.",
          "title": "Id",
          "type": "string"
        },
        "type": {
          "$ref": "#/$defs/MemoryType",
          "description": "The type of memory to store context."
        },
        "embedding_model": {
          "description": "Embedding model ID used for storage.",
          "title": "Embedding Model",
          "type": "string"
        },
        "persist": {
          "default": false,
          "description": "Whether memory persists across sessions.",
          "title": "Persist",
          "type": "boolean"
        },
        "ttl_minutes": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional TTL for temporary memory.",
          "title": "Ttl Minutes"
        },
        "use_for_context": {
          "default": true,
          "description": "Whether this memory should be injected as context.",
          "title": "Use For Context",
          "type": "boolean"
        }
      },
      "required": [
        "id",
        "type",
        "embedding_model"
      ],
      "title": "Memory",
      "type": "object"
    },
    "MemoryType": {
      "description": "Enum to differentiate supported memory types, such as vector memory for embedding-based recall.",
      "enum": [
        "vector"
      ],
      "title": "MemoryType",
      "type": "string"
    },
    "Model": {
      "additionalProperties": false,
      "description": "Describes a generative model configuration, including provider and model ID.",
      "properties": {
        "id": {
          "description": "Unique ID for the model.",
          "title": "Id",
          "type": "string"
        },
        "provider": {
          "description": "Name of the provider, e.g., openai or anthropic.",
          "title": "Provider",
          "type": "string"
        },
        "model_id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The specific model name or ID for the provider. If None, id is used",
          "title": "Model Id"
        },
        "inference_params": {
          "anyOf": [
            {
              "additionalProperties": true,
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional inference parameters like temperature or max_tokens.",
          "title": "Inference Params"
        },
        "dimensions": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Dimensionality of the embedding vectors produced by this model if an embedding model.",
          "title": "Dimensions"
        }
      },
      "required": [
        "id",
        "provider"
      ],
      "title": "Model",
      "type": "object"
    },
    "Prompt": {
      "additionalProperties": false,
      "description": "References a prompt template, either inline or from file, along with expected input and output variable bindings.",
      "properties": {
        "id": {
          "description": "Unique ID for the prompt.",
          "title": "Id",
          "type": "string"
        },
        "path": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "File path to the prompt template.",
          "title": "Path"
        },
        "template": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Inline template string for the prompt.",
          "title": "Template"
        },
        "inputs": {
          "description": "List of input variable IDs this prompt expects.",
          "items": {
            "type": "string"
          },
          "title": "Inputs",
          "type": "array"
        },
        "outputs": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional list of output variable IDs this prompt generates.",
          "title": "Outputs"
        }
      },
      "required": [
        "id",
        "inputs"
      ],
      "title": "Prompt",
      "type": "object"
    },
    "TelemetrySink": {
      "additionalProperties": false,
      "description": "Defines an observability endpoint for collecting telemetry data from the QType runtime.",
      "properties": {
        "id": {
          "description": "Unique ID of the telemetry sink configuration.",
          "title": "Id",
          "type": "string"
        },
        "endpoint": {
          "description": "URL endpoint where telemetry data will be sent.",
          "title": "Endpoint",
          "type": "string"
        },
        "auth": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "AuthorizationProvider ID used to authenticate telemetry data transmission.",
          "title": "Auth"
        }
      },
      "required": [
        "id",
        "endpoint"
      ],
      "title": "TelemetrySink",
      "type": "object"
    },
    "Tool": {
      "additionalProperties": false,
      "description": "Callable function or external operation available to the model. Input/output shapes are described via JSON Schema.",
      "properties": {
        "type": {
          "const": "tool",
          "title": "Type",
          "type": "string"
        },
        "id": {
          "description": "Unique ID of the tool.",
          "title": "Id",
          "type": "string"
        },
        "name": {
          "description": "Name of the tool function.",
          "title": "Name",
          "type": "string"
        },
        "description": {
          "description": "Description of what the tool does.",
          "title": "Description",
          "type": "string"
        },
        "inputs": {
          "description": "List of input variable IDs this prompt expects.",
          "items": {
            "type": "string"
          },
          "title": "Inputs",
          "type": "array"
        },
        "outputs": {
          "description": "Optional list of output variable IDs this prompt generates.",
          "items": {
            "type": "string"
          },
          "title": "Outputs",
          "type": "array"
        }
      },
      "required": [
        "type",
        "id",
        "name",
        "description",
        "inputs",
        "outputs"
      ],
      "title": "Tool",
      "type": "object"
    },
    "ToolProvider": {
      "additionalProperties": false,
      "description": "Logical grouping of tools, often backed by an API or OpenAPI spec, and optionally authenticated.\n\nThis should show the Pydantic fields.",
      "properties": {
        "id": {
          "description": "Unique ID of the tool provider.",
          "title": "Id",
          "type": "string"
        },
        "name": {
          "description": "Name of the tool provider.",
          "title": "Name",
          "type": "string"
        },
        "tools": {
          "description": "List of tools exposed by this provider.",
          "items": {
            "$ref": "#/$defs/Tool"
          },
          "title": "Tools",
          "type": "array"
        },
        "openapi_spec": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional path or URL to an OpenAPI spec to auto-generate tools.",
          "title": "Openapi Spec"
        },
        "include_tags": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Limit tool generation to specific OpenAPI tags.",
          "title": "Include Tags"
        },
        "exclude_paths": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Exclude specific endpoints by path.",
          "title": "Exclude Paths"
        },
        "auth": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "AuthorizationProvider ID used to authenticate tool access.",
          "title": "Auth"
        }
      },
      "required": [
        "id",
        "name",
        "tools"
      ],
      "title": "ToolProvider",
      "type": "object"
    },
    "Variable": {
      "additionalProperties": false,
      "description": "Schema for a variable that can serve as input, output, or parameter within the DSL.",
      "properties": {
        "id": {
          "description": "Unique ID of the variable. Referenced in prompts or steps.",
          "title": "Id",
          "type": "string"
        },
        "type": {
          "$ref": "#/$defs/VariableType",
          "description": "Type of data expected or produced."
        }
      },
      "required": [
        "id",
        "type"
      ],
      "title": "Variable",
      "type": "object"
    },
    "VariableType": {
      "description": "Represents the type of data a user or system input can accept within the DSL.\nUsed for schema validation and UI rendering of input fields.",
      "enum": [
        "text",
        "number",
        "file",
        "image",
        "date",
        "time",
        "datetime",
        "video",
        "audio"
      ],
      "title": "VariableType",
      "type": "string"
    },
    "VectorDBRetriever": {
      "additionalProperties": false,
      "description": "Retriever that fetches top-K documents using a vector database and embedding-based similarity search.",
      "properties": {
        "type": {
          "const": "vector_retrieve",
          "default": "vector_retrieve",
          "title": "Type",
          "type": "string"
        },
        "id": {
          "description": "Unique ID of the retriever.",
          "title": "Id",
          "type": "string"
        },
        "index": {
          "description": "ID of the index this retriever uses.",
          "title": "Index",
          "type": "string"
        },
        "embedding_model": {
          "description": "ID of the embedding model used to vectorize the query.",
          "title": "Embedding Model",
          "type": "string"
        },
        "top_k": {
          "default": 5,
          "description": "Number of top documents to retrieve.",
          "title": "Top K",
          "type": "integer"
        },
        "args": {
          "anyOf": [
            {
              "additionalProperties": true,
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Arbitrary arguments as JSON/YAML for custom retriever configuration.",
          "title": "Args"
        },
        "inputs": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input variable IDs required by this retriever.",
          "title": "Inputs"
        },
        "outputs": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional list of output variable IDs this prompt generates.",
          "title": "Outputs"
        }
      },
      "required": [
        "id",
        "index",
        "embedding_model"
      ],
      "title": "VectorDBRetriever",
      "type": "object"
    }
  },
  "additionalProperties": false,
  "description": "The root configuration object for a QType AI application. Includes flows, models, tools, and more.\nThis object is expected to be serialized into YAML and consumed by the QType runtime.",
  "properties": {
    "version": {
      "description": "Version of the QType specification schema used.",
      "title": "Version",
      "type": "string"
    },
    "models": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/Model"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "List of generative models available for use, including their providers and inference parameters.",
      "title": "Models"
    },
    "variables": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/Variable"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Variables or parameters exposed by the application.",
      "title": "Variables"
    },
    "prompts": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/Prompt"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Prompt templates used in generation steps or tools, referencing input and output variables.",
      "title": "Prompts"
    },
    "tool_providers": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/ToolProvider"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Tool providers with optional OpenAPI specs, exposing callable tools for the model.",
      "title": "Tool Providers"
    },
    "flows": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/Flow"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Entry points to application logic. Each flow defines an executable composition of steps.",
      "title": "Flows"
    },
    "agents": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/Agent"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "AI agents with specific models, prompts, and tools for autonomous task execution.",
      "title": "Agents"
    },
    "feedback": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/Feedback"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Feedback configurations for collecting structured or unstructured user reactions to outputs.",
      "title": "Feedback"
    },
    "memory": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/Memory"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Session-level memory contexts, only used in chat-mode flows to persist state across turns.",
      "title": "Memory"
    },
    "auth": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/AuthorizationProvider"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Authorization providers and credentials used to access external APIs or cloud services.",
      "title": "Auth"
    },
    "telemetry": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/TelemetrySink"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Telemetry sinks for collecting observability data from the QType runtime.",
      "title": "Telemetry"
    }
  },
  "required": [
    "version"
  ],
  "title": "QTypeSpec",
  "type": "object",
  "$schema": "http://json-schema.org/draft-07/schema#"
}