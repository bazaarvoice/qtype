{
  "$defs": {
    "AuthorizationProvider": {
      "additionalProperties": false,
      "description": "Defines how tools or providers authenticate with APIs, such as OAuth2 or API keys.",
      "properties": {
        "id": {
          "description": "Unique ID of the authorization configuration.",
          "title": "Id",
          "type": "string"
        },
        "type": {
          "description": "Authorization method, e.g., 'oauth2' or 'api_key'.",
          "title": "Type",
          "type": "string"
        },
        "host": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Base URL or domain of the provider.",
          "title": "Host"
        },
        "client_id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "OAuth2 client ID.",
          "title": "Client Id"
        },
        "client_secret": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "OAuth2 client secret.",
          "title": "Client Secret"
        },
        "token_url": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Token endpoint URL.",
          "title": "Token Url"
        },
        "scopes": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "OAuth2 scopes required.",
          "title": "Scopes"
        },
        "api_key": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "API key if using token-based auth.",
          "title": "Api Key"
        }
      },
      "required": [
        "id",
        "type"
      ],
      "title": "AuthorizationProvider",
      "type": "object"
    },
    "BaseRetriever": {
      "additionalProperties": false,
      "description": "Abstract base class for all retriever types that supply context for prompt execution.",
      "properties": {
        "id": {
          "description": "Unique ID of the retriever.",
          "title": "Id",
          "type": "string"
        },
        "index": {
          "description": "ID of the index this retriever uses.",
          "title": "Index",
          "type": "string"
        }
      },
      "required": [
        "id",
        "index"
      ],
      "title": "BaseRetriever",
      "type": "object"
    },
    "Condition": {
      "additionalProperties": false,
      "description": "Conditional logic gate within a flow. Supports branching logic for execution based on variable values.",
      "properties": {
        "if_var": {
          "description": "ID of the variable to evaluate.",
          "title": "If Var",
          "type": "string"
        },
        "equals": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            },
            {
              "type": "number"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Match condition for equality check.",
          "title": "Equals"
        },
        "exists": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Condition to check existence of a variable.",
          "title": "Exists"
        },
        "then": {
          "description": "List of step IDs to run if condition matches.",
          "items": {
            "type": "string"
          },
          "title": "Then",
          "type": "array"
        },
        "else": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional list of step IDs to run if condition fails.",
          "title": "Else"
        }
      },
      "required": [
        "if_var",
        "then"
      ],
      "title": "Condition",
      "type": "object"
    },
    "DisplayMetadata": {
      "additionalProperties": false,
      "description": "Additional UI hints used to customize how input fields are displayed in the generated application UI.",
      "properties": {
        "placeholder": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Placeholder text shown inside the input field.",
          "title": "Placeholder"
        },
        "tooltip": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Tooltip shown on hover.",
          "title": "Tooltip"
        },
        "default_value": {
          "anyOf": [
            {},
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Default value if the user doesn't supply one.",
          "title": "Default Value"
        },
        "min_value": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Minimum value for numeric inputs.",
          "title": "Min Value"
        },
        "max_value": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Maximum value for numeric inputs.",
          "title": "Max Value"
        },
        "step": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Step size for numeric inputs.",
          "title": "Step"
        },
        "allowed_types": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Allowed file types for file upload.",
          "title": "Allowed Types"
        },
        "options": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Options for dropdowns, radios, or checkboxes.",
          "title": "Options"
        },
        "group": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Grouping section this input belongs to.",
          "title": "Group"
        },
        "section": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Section name used to visually separate inputs.",
          "title": "Section"
        },
        "icon": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Icon shown alongside input (optional).",
          "title": "Icon"
        },
        "css_class": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional CSS class for advanced styling.",
          "title": "Css Class"
        }
      },
      "title": "DisplayMetadata",
      "type": "object"
    },
    "DisplayType": {
      "description": "UI rendering hint for how an input should appear in the frontend (e.g., text box, dropdown, file upload).",
      "enum": [
        "text",
        "textarea",
        "dropdown",
        "file_upload",
        "checkbox",
        "slider",
        "radio",
        "group",
        "section"
      ],
      "title": "DisplayType",
      "type": "string"
    },
    "Feedback": {
      "additionalProperties": false,
      "description": "Schema to define how user feedback is collected, structured, and optionally used to guide future prompts.",
      "properties": {
        "id": {
          "description": "Unique ID of the feedback config.",
          "title": "Id",
          "type": "string"
        },
        "type": {
          "$ref": "#/$defs/FeedbackType",
          "description": "Feedback mechanism type."
        },
        "question": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Question to show user for qualitative feedback.",
          "title": "Question"
        },
        "prompt": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "ID of prompt used to generate a follow-up based on feedback.",
          "title": "Prompt"
        }
      },
      "required": [
        "id",
        "type"
      ],
      "title": "Feedback",
      "type": "object"
    },
    "FeedbackType": {
      "description": "Enum of supported feedback mechanisms such as thumbs, stars, or text responses.",
      "enum": [
        "thumbs",
        "star",
        "text",
        "rating",
        "choice",
        "boolean"
      ],
      "title": "FeedbackType",
      "type": "string"
    },
    "Flow": {
      "additionalProperties": false,
      "description": "Composable structure that defines the interaction logic for a generative AI application.\nSupports branching, memory, and sequencing of steps.",
      "properties": {
        "id": {
          "description": "Unique ID of the step.",
          "title": "Id",
          "type": "string"
        },
        "input_vars": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input variable IDs required by this step.",
          "title": "Input Vars"
        },
        "output_vars": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Variable IDs where output is stored.",
          "title": "Output Vars"
        },
        "component": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "ID of the component to invoke (e.g., prompt ID, tool ID).",
          "title": "Component"
        },
        "mode": {
          "$ref": "#/$defs/FlowMode",
          "description": "Interaction mode for the flow."
        },
        "inputs": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input variable IDs accepted by the flow.",
          "title": "Inputs"
        },
        "outputs": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Output variable IDs produced by the flow.",
          "title": "Outputs"
        },
        "steps": {
          "description": "List of steps or nested flow IDs.",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/Step"
              },
              {
                "type": "string"
              }
            ]
          },
          "title": "Steps",
          "type": "array"
        },
        "conditions": {
          "anyOf": [
            {
              "items": {
                "$ref": "#/$defs/Condition"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional conditional logic within the flow.",
          "title": "Conditions"
        },
        "memory": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "List of memory IDs to include (chat mode only).",
          "title": "Memory"
        }
      },
      "required": [
        "id",
        "mode"
      ],
      "title": "Flow",
      "type": "object"
    },
    "FlowMode": {
      "description": "Execution context for the flow. `chat` maintains history, while `complete` operates statelessly.",
      "enum": [
        "chat",
        "complete"
      ],
      "title": "FlowMode",
      "type": "string"
    },
    "Input": {
      "additionalProperties": false,
      "description": "Schema for a single user input or external parameter required for a flow or prompt within the DSL.",
      "properties": {
        "id": {
          "description": "Unique ID of the input. Referenced in prompts or steps.",
          "title": "Id",
          "type": "string"
        },
        "type": {
          "$ref": "#/$defs/VariableType",
          "description": "Type of data expected."
        },
        "display_name": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Label shown in the UI.",
          "title": "Display Name"
        },
        "display_type": {
          "anyOf": [
            {
              "$ref": "#/$defs/DisplayType"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Hint for how to render this input."
        },
        "display_metadata": {
          "anyOf": [
            {
              "$ref": "#/$defs/DisplayMetadata"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Additional UI hints."
        }
      },
      "required": [
        "id",
        "type"
      ],
      "title": "Input",
      "type": "object"
    },
    "Memory": {
      "additionalProperties": false,
      "description": "Session or persistent memory used to store relevant conversation or state data across steps or turns.",
      "properties": {
        "id": {
          "description": "Unique ID of the memory block.",
          "title": "Id",
          "type": "string"
        },
        "type": {
          "$ref": "#/$defs/MemoryType",
          "description": "The type of memory to store context."
        },
        "embedding_model": {
          "description": "Embedding model ID used for storage.",
          "title": "Embedding Model",
          "type": "string"
        },
        "persist": {
          "default": false,
          "description": "Whether memory persists across sessions.",
          "title": "Persist",
          "type": "boolean"
        },
        "ttl_minutes": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional TTL for temporary memory.",
          "title": "Ttl Minutes"
        },
        "use_for_context": {
          "default": true,
          "description": "Whether this memory should be injected as context.",
          "title": "Use For Context",
          "type": "boolean"
        }
      },
      "required": [
        "id",
        "type",
        "embedding_model"
      ],
      "title": "Memory",
      "type": "object"
    },
    "MemoryType": {
      "description": "Enum to differentiate supported memory types, such as vector memory for embedding-based recall.",
      "enum": [
        "vector"
      ],
      "title": "MemoryType",
      "type": "string"
    },
    "Model": {
      "additionalProperties": false,
      "description": "Describes a generative model configuration, including provider and model ID.",
      "properties": {
        "id": {
          "description": "Unique ID for the model.",
          "title": "Id",
          "type": "string"
        },
        "provider": {
          "description": "Name of the provider, e.g., openai or anthropic.",
          "title": "Provider",
          "type": "string"
        },
        "model_id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The specific model name or ID for the provider. If None, id is used",
          "title": "Model Id"
        },
        "inference_params": {
          "anyOf": [
            {
              "additionalProperties": true,
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional inference parameters like temperature or max_tokens.",
          "title": "Inference Params"
        }
      },
      "required": [
        "id",
        "provider"
      ],
      "title": "Model",
      "type": "object"
    },
    "Prompt": {
      "additionalProperties": false,
      "description": "References a prompt template, either inline or from file, along with expected input and output variable bindings.",
      "properties": {
        "id": {
          "description": "Unique ID for the prompt.",
          "title": "Id",
          "type": "string"
        },
        "path": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "File path to the prompt template.",
          "title": "Path"
        },
        "template": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Inline template string for the prompt.",
          "title": "Template"
        },
        "input_vars": {
          "description": "List of input variable IDs this prompt expects.",
          "items": {
            "type": "string"
          },
          "title": "Input Vars",
          "type": "array"
        },
        "output_vars": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional list of output variable IDs this prompt generates.",
          "title": "Output Vars"
        }
      },
      "required": [
        "id",
        "input_vars"
      ],
      "title": "Prompt",
      "type": "object"
    },
    "Step": {
      "additionalProperties": false,
      "description": "A modular unit of execution in a flow. Can represent a prompt, tool call, or memory operation.",
      "properties": {
        "id": {
          "description": "Unique ID of the step.",
          "title": "Id",
          "type": "string"
        },
        "input_vars": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Input variable IDs required by this step.",
          "title": "Input Vars"
        },
        "output_vars": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Variable IDs where output is stored.",
          "title": "Output Vars"
        },
        "component": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "ID of the component to invoke (e.g., prompt ID, tool ID).",
          "title": "Component"
        }
      },
      "required": [
        "id"
      ],
      "title": "Step",
      "type": "object"
    },
    "Tool": {
      "additionalProperties": false,
      "description": "Callable function or external operation available to the model. Input/output shapes are described via JSON Schema.",
      "properties": {
        "id": {
          "description": "Unique ID of the tool.",
          "title": "Id",
          "type": "string"
        },
        "name": {
          "description": "Name of the tool function.",
          "title": "Name",
          "type": "string"
        },
        "description": {
          "description": "Description of what the tool does.",
          "title": "Description",
          "type": "string"
        },
        "input_schema": {
          "additionalProperties": true,
          "description": "JSON Schema describing the input parameters for the API endpoint.",
          "title": "Input Schema",
          "type": "object"
        },
        "output_schema": {
          "additionalProperties": true,
          "description": "JSON Schema describing the response structure from the API endpoint.",
          "title": "Output Schema",
          "type": "object"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "input_schema",
        "output_schema"
      ],
      "title": "Tool",
      "type": "object"
    },
    "ToolProvider": {
      "additionalProperties": false,
      "description": "Logical grouping of tools, often backed by an API or OpenAPI spec, and optionally authenticated.\n\nThis should show the Pydantic fields.",
      "properties": {
        "id": {
          "description": "Unique ID of the tool provider.",
          "title": "Id",
          "type": "string"
        },
        "name": {
          "description": "Name of the tool provider.",
          "title": "Name",
          "type": "string"
        },
        "tools": {
          "description": "List of tools exposed by this provider.",
          "items": {
            "$ref": "#/$defs/Tool"
          },
          "title": "Tools",
          "type": "array"
        },
        "openapi_spec": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional path or URL to an OpenAPI spec to auto-generate tools.",
          "title": "Openapi Spec"
        },
        "include_tags": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Limit tool generation to specific OpenAPI tags.",
          "title": "Include Tags"
        },
        "exclude_paths": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Exclude specific endpoints by path.",
          "title": "Exclude Paths"
        },
        "auth": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "AuthorizationProvider ID used to authenticate tool access.",
          "title": "Auth"
        }
      },
      "required": [
        "id",
        "name",
        "tools"
      ],
      "title": "ToolProvider",
      "type": "object"
    },
    "VariableType": {
      "description": "Represents the type of data a user or system input can accept within the DSL.\nUsed for schema validation and UI rendering of input fields.",
      "enum": [
        "text",
        "number",
        "file",
        "image",
        "date",
        "time",
        "datetime",
        "video",
        "audio"
      ],
      "title": "VariableType",
      "type": "string"
    }
  },
  "additionalProperties": false,
  "description": "The root configuration object for a QType AI application. Includes flows, models, tools, and more.\nThis object is expected to be serialized into YAML and consumed by the QType runtime.",
  "properties": {
    "version": {
      "description": "Version of the QType specification schema used.",
      "title": "Version",
      "type": "string"
    },
    "models": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/Model"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "List of generative models available for use, including their providers and inference parameters.",
      "title": "Models"
    },
    "inputs": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/Input"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "User-facing inputs or parameters exposed by the application.",
      "title": "Inputs"
    },
    "prompts": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/Prompt"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Prompt templates used in generation steps or tools, referencing input and output variables.",
      "title": "Prompts"
    },
    "retrievers": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/BaseRetriever"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Document retrievers used to fetch context from indexes (e.g., vector search, keyword search).",
      "title": "Retrievers"
    },
    "tools": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/ToolProvider"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Tool providers with optional OpenAPI specs, exposing callable tools for the model.",
      "title": "Tools"
    },
    "flows": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/Flow"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Entry points to application logic. Each flow defines an executable composition of steps.",
      "title": "Flows"
    },
    "feedback": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/Feedback"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Feedback configurations for collecting structured or unstructured user reactions to outputs.",
      "title": "Feedback"
    },
    "memory": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/Memory"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Session-level memory contexts, only used in chat-mode flows to persist state across turns.",
      "title": "Memory"
    },
    "auth": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/AuthorizationProvider"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Authorization providers and credentials used to access external APIs or cloud services.",
      "title": "Auth"
    }
  },
  "required": [
    "version"
  ],
  "title": "QTypeSpec",
  "type": "object",
  "$schema": "http://json-schema.org/draft-07/schema#"
}